import { bundleStore, providerStore } from '../writers';
let _parsers = {};
export class DecoratedModule {
    constructor(name, modules = false) {
        this.name = name;
        if (modules) {
            this.moduleList(modules);
            this._module = angular.module(name, this._dependencies);
        }
        else {
            this._module = angular.module(name);
        }
    }
    add(...providers) {
        for (let provider of providers) {
            if (!providerStore.has('type', provider)) {
                throw new Error(`Cannot read provider metadata. Are you adding a class that hasn't been decorated yet?`);
            }
            let type = providerStore.get('type', provider);
            let name = providerStore.get('name', provider);
            let inject = bundleStore.get('$inject', provider) || [];
            if (_parsers[type]) {
                _parsers[type](provider, name, inject, this._module);
            }
            else {
                throw new Error(`No parser registered for type '${type}'`);
            }
        }
        return this;
    }
    publish() {
        return this._module;
    }
    moduleList(modules) {
        this._dependencies = [];
        if (modules && modules.length !== 0) {
            for (let i = 0; i < modules.length; i++) {
                if (typeof modules[i] === 'string') {
                    this._dependencies.push(modules[i]);
                }
                else if (modules[i] && modules[i].name) {
                    this._dependencies.push(modules[i].name);
                }
                else {
                    throw new Error(`Cannot read module: Unknown module in ${this.name}`);
                }
            }
        }
    }
    config(configFunc) {
        this._module.config(configFunc);
        return this;
    }
    run(runFunc) {
        this._module.run(runFunc);
        return this;
    }
    value(name, value) {
        this._module.value(name, value);
        return this;
    }
    constant(name, value) {
        this._module.constant(name, value);
        return this;
    }
}
let Module = function (name, modules) {
    return new DecoratedModule(name, modules);
};
Module.addProvider = function (providerType, parser) {
    _parsers[providerType] = parser;
};
Module.getParser = function (providerType) {
    return _parsers[providerType];
};
export default Module;

//# sourceMappingURL=data:application/json;base64,
