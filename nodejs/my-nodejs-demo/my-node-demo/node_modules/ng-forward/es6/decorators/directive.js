import parseSelector from '../util/parse-selector';
import { providerStore, componentStore } from '../writers';
import { Providers } from './providers';
import Module from '../classes/module';
import directiveControllerFactory from '../util/directive-controller';
import { createConfigErrorMessage } from '../util/helpers';
const TYPE = 'directive';
export function Directive({ selector, providers = [] }) {
    return function (t) {
        if (!selector) {
            throw new Error('Directive selector must be provided');
        }
        let { name, type: restrict } = parseSelector(selector);
        if (providers !== undefined && !Array.isArray(providers)) {
            throw new TypeError(`Directive providers must be an array`);
        }
        providerStore.set('name', name, t);
        providerStore.set('type', TYPE, t);
        Providers(...providers)(t, `while analyzing Directive '${t.name}' providers`);
        componentStore.set('restrict', restrict, t);
    };
}
Module.addProvider(TYPE, (target, name, injects, ngModule) => {
    let ddo = {};
    componentStore.forEach((val, key) => ddo[key] = val, target);
    if (ddo.restrict !== 'A') {
        throw new Error(createConfigErrorMessage(target, ngModule, `@Directive selectors can only be attributes, e.g. selector: '[my-directive]'`));
    }
    ngModule.directive(name, ['$injector', ($injector) => {
            ddo.link = function ($scope, $element, $attrs, $requires, $transclude) {
                let locals = { $scope, $element, $attrs, $transclude, $requires };
                return directiveControllerFactory(this, injects, target, ddo, $injector, locals);
            };
            return ddo;
        }]);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZWNvcmF0b3JzL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6WyJEaXJlY3RpdmUiXSwibWFwcGluZ3MiOiJPQVFPLGFBQWEsTUFBTSx3QkFBd0I7T0FHM0MsRUFBQyxhQUFhLEVBQUUsY0FBYyxFQUFDLE1BQU0sWUFBWTtPQUdqRCxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWE7T0FFOUIsTUFBTSxNQUFNLG1CQUFtQjtPQUMvQiwwQkFBMEIsTUFBTSw4QkFBOEI7T0FFOUQsRUFBQyx3QkFBd0IsRUFBQyxNQUFNLGlCQUFpQjtBQUt4RCxNQUFNLElBQUksR0FBRyxXQUFXLENBQUM7QUFHekIsMEJBQ0UsRUFDQyxRQUFRLEVBQ1IsU0FBUyxHQUFHLEVBQUUsRUFLZDtJQUVGQSxNQUFNQSxDQUFDQSxVQUFTQSxDQUFNQTtRQUVyQixFQUFFLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFHRCxJQUFJLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUMsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckQsRUFBRSxDQUFBLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3hELE1BQU0sSUFBSSxTQUFTLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBR0QsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUluQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsOEJBQThCLENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1FBRzlFLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUFBO0FBQ0ZBLENBQUNBO0FBR0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLE9BQWlCLEVBQUUsUUFBb0I7SUFFM0YsSUFBSSxHQUFHLEdBQVEsRUFBRSxDQUFDO0lBR2xCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFJN0QsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFDdkQsOEVBQThFLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFHRCxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQW1DO1lBRzFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBUyxNQUFXLEVBQUUsUUFBYSxFQUFFLE1BQVcsRUFBRSxTQUFjLEVBQUUsV0FBZ0I7Z0JBQzVGLElBQUksTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxDQUFDO2dCQUNsRSxNQUFNLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsRixDQUFDLENBQUM7WUFFRixNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9kZWNvcmF0b3JzL2RpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICMgRGlyZWN0aXZlIERlY29yYXRvclxuLy9cbi8vICMjIFVzYWdlXG4vL1xuLy8gIyMgU2V0dXBcbi8vIGBwYXJzZVNlbGVjdG9yYCB0YWtlcyBzb21lIHNpbXBsZSBDU1Mgc2VsZWN0b3IgYW5kIHJldHVybnMgYSBjYW1lbENhc2VkIHZlcnNpb25cbi8vIG9mIHRoZSBzZWxlY3RvciBhcyB3ZWxsIGFzIHRoZSB0eXBlIG9mIHNlbGVjdG9yIGl0IHdhcyAoZWxlbWVudCwgYXR0cmlidXRlLCBvclxuLy8gQ1NTIGNsYXNzKS5cbmltcG9ydCBwYXJzZVNlbGVjdG9yIGZyb20gJy4uL3V0aWwvcGFyc2Utc2VsZWN0b3InO1xuLy8gYHByb3ZpZGVyU3RvcmVgIHNldHMgdXAgcHJvdmlkZXIgaW5mb3JtYXRpb24sIGBjb21wb25lbnRTdG9yZWAgd3JpdGVzIHRoZSBERE8sXG4vLyBhbmQgYGFwcFdyaXRlcmAgc2V0cyB1cCBhcHAgdHJhdmVyc2FsL2Jvb3RzdHJhcHBpbmcgaW5mb3JtYXRpb24uXG5pbXBvcnQge3Byb3ZpZGVyU3RvcmUsIGNvbXBvbmVudFN0b3JlfSBmcm9tICcuLi93cml0ZXJzJztcbi8vIFRha2VzIHRoZSBpbmZvcm1hdGlvbiBmcm9tIGBjb25maWcucHJvdmlkZXJzYCBhbmQgdHVybnMgaXQgaW50byB0aGUgYWN0dWFsIG1ldGFkYXRhXG4vLyBuZWVkZWQgZHVyaW5nIGFwcCB0cmF2ZXJzYWxcbmltcG9ydCB7UHJvdmlkZXJzfSBmcm9tICcuL3Byb3ZpZGVycyc7XG4vLyBQcm92aWRlciBwYXJzZXIgd2lsbCBuZWVkIHRvIGJlIHJlZ2lzdGVyZWQgd2l0aCBNb2R1bGVcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY2xhc3Nlcy9tb2R1bGUnO1xuaW1wb3J0IGRpcmVjdGl2ZUNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4uL3V0aWwvZGlyZWN0aXZlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHtpbnB1dHNNYXB9IGZyb20gJy4uL3Byb3BlcnRpZXMvaW5wdXRzLWJ1aWxkZXInO1xuaW1wb3J0IHtjcmVhdGVDb25maWdFcnJvck1lc3NhZ2V9IGZyb20gJy4uL3V0aWwvaGVscGVycyc7XG5cbi8vIFRoZSB0eXBlIGZvciByaWdodCBub3cgaXMgYGRpcmVjdGl2ZWAuIEluIGFuZ3VsYXItZGVjb3JhdG9ycyB0aGVyZSB3YXMgdmVyeSBsaXR0bGVcbi8vIGRpZmZlcmVuY2UgYmV0d2VlbiBgQENvbXBvbmVudGAgYW5kIGBARGlyZWN0aXZlYCBzbyB0aGV5IHNoYXJlZCBhIGNvbW1vbiBwcm92aWRlclxuLy8gcGFyc2VyIGRlZmluZWQgaW4gYC4uLy4uL3V0aWwvZGVjb3JhdGUtZGlyZWN0aXZlLmpzYFxuY29uc3QgVFlQRSA9ICdkaXJlY3RpdmUnO1xuXG4vLyAjIyBEZWNvcmF0b3IgRGVmaW5pdGlvblxuZXhwb3J0IGZ1bmN0aW9uIERpcmVjdGl2ZShcblx0XHR7XG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdHByb3ZpZGVycyA9IFtdXG5cdFx0fSA6XG5cdFx0e1xuXHRcdFx0c2VsZWN0b3I6IHN0cmluZyxcblx0XHRcdHByb3ZpZGVycz86IGFueVtdXG5cdFx0fVxuXHQpe1xuXHRyZXR1cm4gZnVuY3Rpb24odDogYW55KXtcblx0XHQvLyBUaGUgb25seSByZXF1aXJlZCBjb25maWcgaXMgYSBzZWxlY3Rvci4gSWYgb25lIHdhc24ndCBwYXNzZWQsIHRocm93IGltbWVkaWF0ZWx5XG5cdFx0aWYoICFzZWxlY3RvciApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRGlyZWN0aXZlIHNlbGVjdG9yIG11c3QgYmUgcHJvdmlkZWQnKTtcblx0XHR9XG5cdFxuXHRcdC8vIEdyYWIgdGhlIHByb3ZpZGVyIG5hbWUgYW5kIHNlbGVjdG9yIHR5cGUgYnkgcGFyc2luZyB0aGUgc2VsZWN0b3Jcblx0XHRsZXQge25hbWUsIHR5cGU6IHJlc3RyaWN0fSA9IHBhcnNlU2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHRcblx0XHRpZihwcm92aWRlcnMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwcm92aWRlcnMpKXtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYERpcmVjdGl2ZSBwcm92aWRlcnMgbXVzdCBiZSBhbiBhcnJheWApO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2V0dXAgcHJvdmlkZXIgaW5mb3JtYXRpb24gdXNpbmcgdGhlIHBhcnNlZCBzZWxlY3RvclxuXHRcdHByb3ZpZGVyU3RvcmUuc2V0KCduYW1lJywgbmFtZSwgdCk7XG5cdFx0cHJvdmlkZXJTdG9yZS5zZXQoJ3R5cGUnLCBUWVBFLCB0KTtcblx0XG5cdFx0Ly8gR3JhYiB0aGUgcHJvdmlkZXJzIGZyb20gdGhlIGNvbmZpZyBvYmplY3QsIHBhcnNlIHRoZW0sIGFuZCB3cml0ZSB0aGUgbWV0YWRhdGFcblx0XHQvLyB0byB0aGUgdGFyZ2V0LlxuXHRcdFByb3ZpZGVycyguLi5wcm92aWRlcnMpKHQsIGB3aGlsZSBhbmFseXppbmcgRGlyZWN0aXZlICcke3QubmFtZX0nIHByb3ZpZGVyc2ApO1xuXHRcblx0XHQvLyBSZXN0cmljdCB0eXBlIG11c3QgYmUgJ2VsZW1lbnQnXG5cdFx0Y29tcG9uZW50U3RvcmUuc2V0KCdyZXN0cmljdCcsIHJlc3RyaWN0LCB0KTtcblx0fVxufVxuXG4vLyAjIyBDb21wb25lbnQgUHJvdmlkZXIgUGFyc2VyXG5Nb2R1bGUuYWRkUHJvdmlkZXIoVFlQRSwgKHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcsIGluamVjdHM6IHN0cmluZ1tdLCBuZ01vZHVsZTogbmcuSU1vZHVsZSkgPT4ge1xuXHQvLyBGaXJzdCBjcmVhdGUgYW4gZW1wdHkgb2JqZWN0IHRvIGNvbnRhaW4gdGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFxuXHRsZXQgZGRvOiBhbnkgPSB7fTtcblxuXHQvLyBMb29wIHRocm91Z2ggdGhlIGtleS92YWwgcGFpcnMgb2YgbWV0YWRhdGEgYW5kIGFzc2lnbiBpdCB0byB0aGUgRERPXG5cdGNvbXBvbmVudFN0b3JlLmZvckVhY2goKHZhbCwga2V5KSA9PiBkZG9ba2V5XSA9IHZhbCwgdGFyZ2V0KTtcblxuXHQvLyBJZiB0aGUgc2VsZWN0b3IgdHlwZSB3YXMgbm90IGFuIGVsZW1lbnQsIHRocm93IGFuIGVycm9yLiBDb21wb25lbnRzIGNhbiBvbmx5XG5cdC8vIGJlIGVsZW1lbnRzIGluIEFuZ3VsYXIgMiwgc28gd2Ugd2FudCB0byBlbmZvcmNlIHRoYXQgc3RyaWN0bHkgaGVyZS5cblx0aWYoZGRvLnJlc3RyaWN0ICE9PSAnQScpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoY3JlYXRlQ29uZmlnRXJyb3JNZXNzYWdlKHRhcmdldCwgbmdNb2R1bGUsXG5cdFx0XHRcdGBARGlyZWN0aXZlIHNlbGVjdG9ycyBjYW4gb25seSBiZSBhdHRyaWJ1dGVzLCBlLmcuIHNlbGVjdG9yOiAnW215LWRpcmVjdGl2ZV0nYCkpO1xuXHR9XG5cblx0Ly8gRmluYWxseSBhZGQgdGhlIGRpcmVjdGl2ZSB0byB0aGUgcmF3IG1vZHVsZVxuXHRuZ01vZHVsZS5kaXJlY3RpdmUobmFtZSwgWyckaW5qZWN0b3InLCAoJGluamVjdG9yOiBuZy5hdXRvLklJbmplY3RvclNlcnZpY2UpID0+IHtcblx0XHQvLyBDb21wb25lbnQgY29udHJvbGxlcnMgbXVzdCBiZSBjcmVhdGVkIGZyb20gYSBmYWN0b3J5LiBDaGVja291dCBvdXRcblx0XHQvLyB1dGlsL2RpcmVjdGl2ZS1jb250cm9sbGVyLmpzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQncyBnb2luZyBvbiBoZXJlXG5cdFx0ZGRvLmxpbmsgPSBmdW5jdGlvbigkc2NvcGU6IGFueSwgJGVsZW1lbnQ6IGFueSwgJGF0dHJzOiBhbnksICRyZXF1aXJlczogYW55LCAkdHJhbnNjbHVkZTogYW55KXtcblx0XHRcdGxldCBsb2NhbHMgPSB7ICRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHRyYW5zY2x1ZGUsICRyZXF1aXJlcyB9O1xuXHRcdFx0cmV0dXJuIGRpcmVjdGl2ZUNvbnRyb2xsZXJGYWN0b3J5KHRoaXMsIGluamVjdHMsIHRhcmdldCwgZGRvLCAkaW5qZWN0b3IsIGxvY2Fscyk7XG5cdFx0fTtcblxuXHRcdHJldHVybiBkZG87XG5cdH1dKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
