import { bundleStore, providerStore } from '../writers';
import { getInjectableName } from '../util/get-injectable-name';
import { Providers } from '../decorators/providers';
import { OpaqueToken } from '../classes/opaque-token';
import { componentHooks } from './component';
export function Inject(...injects) {
    return function (t1, name, { value: t2 } = { value: undefined }) {
        const targetIsClass = arguments.length === 1;
        const t = targetIsClass ? t1 : t2;
        const notStringBased = (inj) => typeof inj !== 'string' && !(inj instanceof OpaqueToken);
        const ensureInjectable = (inj) => {
            if (!providerStore.get('name', inj) || !providerStore.get('type', inj)) {
                throw new Error(`Processing "${t.name}" @Inject parameter: "${inj.name || inj.toString()}" is not a valid injectable.
				Please ensure ${inj.name || inj.toString()} is injectable. Valid examples can be:
				- a string representing an ng1 provider, e.g. '$q'
				- an @Injectable ng-forward class
				- a Provider, e.g. provide(SOME_CONFIG, {asValue: 100})`);
            }
            return inj;
        };
        var providers = injects
            .filter(notStringBased)
            .map(ensureInjectable);
        Providers(...providers)(t, `while analyzing '${t.name}' injected providers`);
        let dependencies = injects.map(getInjectableName).filter(n => n !== undefined);
        if (bundleStore.has('$inject', t)) {
            let parentInjects = bundleStore.get('$inject', t);
            bundleStore.set('$inject', [...dependencies, ...parentInjects], t);
        }
        else {
            bundleStore.set('$inject', dependencies, t);
        }
    };
}
componentHooks.beforeCtrlInvoke(injectParentComponents);
function injectParentComponents(caller, injects, controller, ddo, $injector, locals) {
    injects.forEach((inject) => {
        if (!$injector.has(inject)) {
            let parent = locals.$element;
            do {
                if (!parent.controller)
                    continue;
                const parentCtrl = parent.controller(inject);
                if (parentCtrl) {
                    locals[inject] = parentCtrl;
                    return;
                }
            } while ((parent = parent.parent()) && parent.length > 0);
        }
    });
}

//# sourceMappingURL=data:application/json;base64,
