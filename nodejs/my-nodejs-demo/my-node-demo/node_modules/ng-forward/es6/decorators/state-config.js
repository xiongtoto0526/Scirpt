import { componentStore, bundleStore } from '../writers';
import { Providers } from './providers';
import { componentHooks } from "./component";
import { createConfigErrorMessage } from '../util/helpers';
import { getInjectableName } from '../util/get-injectable-name';
const configsKey = 'ui-router.stateConfigs';
const childConfigsKey = 'ui-router.stateChildConfigs';
const annotatedResolvesKey = 'ui-router.annotatedResolves';
const resolvedMapKey = 'ui-router.resolvedMap';
export function StateConfig(stateConfigs) {
    return function (t) {
        Providers(...stateConfigs.map(sc => sc.component))(t, `while analyzing StateConfig '${t.name}' state components`);
        componentStore.set(childConfigsKey, stateConfigs, t);
        stateConfigs.forEach(config => {
            if (!config.component)
                return;
            let existingConfigs = componentStore.get(configsKey, config.component) || [];
            componentStore.set(configsKey, [...existingConfigs, config], config.component);
        });
    };
}
function targetIsStaticFn(t) {
    return t.name !== undefined && t.constructor.name === 'Function';
}
export function Resolve(resolveName = null) {
    return function (target, resolveFnName, { value: resolveFn }) {
        if (!targetIsStaticFn(target)) {
            throw new Error('@Resolve target must be a static method.');
        }
        componentStore.merge(annotatedResolvesKey, { [resolveName || resolveFnName]: resolveFn }, target);
    };
}
componentHooks.extendDDO((ddo) => {
    if (ddo.template && ddo.template.replace) {
        ddo.template = ddo.template.replace(/ng-outlet/g, 'ui-view');
    }
});
componentHooks.after((target, name, injects, ngModule) => {
    const childStateConfigs = componentStore.get(childConfigsKey, target);
    if (childStateConfigs) {
        if (!Array.isArray(childStateConfigs)) {
            throw new TypeError(createConfigErrorMessage(target, ngModule, '@StateConfig param must be an array of state objects.'));
        }
        ngModule.config(['$stateProvider', function ($stateProvider) {
                if (!$stateProvider)
                    return;
                childStateConfigs.forEach((config) => {
                    const tagName = bundleStore.get('selector', config.component);
                    config.template = config.template || `<${tagName}></${tagName}>`;
                    const annotatedResolves = componentStore.get(annotatedResolvesKey, config.component) || {};
                    Object.keys(annotatedResolves).forEach(resolveName => {
                        const resolveFn = annotatedResolves[resolveName];
                        const fnInjects = bundleStore.get('$inject', resolveFn);
                        resolveFn.$inject = fnInjects;
                    });
                    config.resolve = Object.assign({}, config.resolve, annotatedResolves);
                    const childInjects = bundleStore.get('$inject', config.component);
                    const injects = childInjects ? childInjects.map(getInjectableName) : [];
                    function stateController(...resolves) {
                        const resolvedMap = resolves.reduce((obj, val, i) => {
                            obj[injects[i]] = val;
                            return obj;
                        }, {});
                        componentStore.set(resolvedMapKey, resolvedMap, config.component);
                    }
                    config.controller = config.controller || [...injects, stateController];
                    $stateProvider.state(config.name, config);
                });
            }]);
    }
});
componentHooks.beforeCtrlInvoke((caller, injects, controller, ddo, $injector, locals) => {
    const resolvesMap = componentStore.get(resolvedMapKey, controller);
    Object.assign(locals, resolvesMap);
});

//# sourceMappingURL=data:application/json;base64,
