import { componentStore } from '../writers';
import parsePropertyMap from '../properties/parse-property-map';
import events from '../events/events';
export const writeMapSingle = (t, localName, publicName, storeKey) => {
    let put = localName + (publicName ? `:${publicName}` : ``);
    let putMap = parsePropertyMap([put]);
    let previousPutMap = componentStore.get(storeKey, t) || {};
    componentStore.set(storeKey, Object.assign({}, previousPutMap, putMap), t);
    return putMap;
};
export const writeMapMulti = (t, names, storeKey) => {
    let putMap = parsePropertyMap(names);
    let previousPutMap = componentStore.get(storeKey, t) || {};
    componentStore.set(storeKey, Object.assign({}, previousPutMap, putMap), t);
    return putMap;
};
export function Input(publicName) {
    return function (proto, localName) {
        writeMapSingle(proto.constructor, localName, publicName, 'inputMap');
    };
}
export function Output(publicName) {
    return function (proto, localName) {
        let outputMap = writeMapSingle(proto.constructor, localName, publicName, 'outputMap');
        Object.keys(outputMap).forEach(key => events.add(key));
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZWNvcmF0b3JzL2lucHV0LW91dHB1dC50cyJdLCJuYW1lcyI6WyJJbnB1dCIsIk91dHB1dCJdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxZQUFZO09BQ2xDLGdCQUFnQixNQUFNLGtDQUFrQztPQUN4RCxNQUFNLE1BQU0sa0JBQWtCO0FBRXJDLGFBQWEsY0FBYyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUTtJQUNoRSxJQUFJLEdBQUcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMzRCxJQUFJLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsSUFBSSxjQUFjLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNELGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRSxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsYUFBYSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVE7SUFDL0MsSUFBSSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsSUFBSSxjQUFjLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNELGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRSxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsc0JBQXNCLFVBQW1CO0lBQ3hDQSxNQUFNQSxDQUFDQSxVQUFTQSxLQUFVQSxFQUFFQSxTQUFpQkE7UUFDNUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUFBO0FBQ0ZBLENBQUNBO0FBRUQsdUJBQXVCLFVBQW1CO0lBQ3pDQyxNQUFNQSxDQUFDQSxVQUFTQSxLQUFVQSxFQUFFQSxTQUFpQkE7UUFDNUMsSUFBSSxTQUFTLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN0RixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQUE7QUFDRkEsQ0FBQ0EiLCJmaWxlIjoibGliL2RlY29yYXRvcnMvaW5wdXQtb3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb21wb25lbnRTdG9yZX0gZnJvbSAnLi4vd3JpdGVycyc7XG5pbXBvcnQgcGFyc2VQcm9wZXJ0eU1hcCBmcm9tICcuLi9wcm9wZXJ0aWVzL3BhcnNlLXByb3BlcnR5LW1hcCc7XG5pbXBvcnQgZXZlbnRzIGZyb20gJy4uL2V2ZW50cy9ldmVudHMnO1xuXG5leHBvcnQgY29uc3Qgd3JpdGVNYXBTaW5nbGUgPSAodCwgbG9jYWxOYW1lLCBwdWJsaWNOYW1lLCBzdG9yZUtleSkgPT4ge1xuXHRsZXQgcHV0ID0gbG9jYWxOYW1lICsgKHB1YmxpY05hbWUgPyBgOiR7cHVibGljTmFtZX1gIDogYGApO1xuXHRsZXQgcHV0TWFwID0gcGFyc2VQcm9wZXJ0eU1hcChbcHV0XSk7XG5cdGxldCBwcmV2aW91c1B1dE1hcCA9IGNvbXBvbmVudFN0b3JlLmdldChzdG9yZUtleSwgdCkgfHwge307XG5cdGNvbXBvbmVudFN0b3JlLnNldChzdG9yZUtleSwgT2JqZWN0LmFzc2lnbih7fSwgcHJldmlvdXNQdXRNYXAsIHB1dE1hcCksIHQpO1xuXHRyZXR1cm4gcHV0TWFwO1xufTtcblxuZXhwb3J0IGNvbnN0IHdyaXRlTWFwTXVsdGkgPSAodCwgbmFtZXMsIHN0b3JlS2V5KSA9PiB7XG5cdGxldCBwdXRNYXAgPSBwYXJzZVByb3BlcnR5TWFwKG5hbWVzKTtcblx0bGV0IHByZXZpb3VzUHV0TWFwID0gY29tcG9uZW50U3RvcmUuZ2V0KHN0b3JlS2V5LCB0KSB8fCB7fTtcblx0Y29tcG9uZW50U3RvcmUuc2V0KHN0b3JlS2V5LCBPYmplY3QuYXNzaWduKHt9LCBwcmV2aW91c1B1dE1hcCwgcHV0TWFwKSwgdCk7XG5cdHJldHVybiBwdXRNYXA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXQocHVibGljTmFtZT86IHN0cmluZyl7XG5cdHJldHVybiBmdW5jdGlvbihwcm90bzogYW55LCBsb2NhbE5hbWU6IHN0cmluZyl7XG5cdFx0d3JpdGVNYXBTaW5nbGUocHJvdG8uY29uc3RydWN0b3IsIGxvY2FsTmFtZSwgcHVibGljTmFtZSwgJ2lucHV0TWFwJyk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE91dHB1dChwdWJsaWNOYW1lPzogc3RyaW5nKXtcblx0cmV0dXJuIGZ1bmN0aW9uKHByb3RvOiBhbnksIGxvY2FsTmFtZTogc3RyaW5nKXtcblx0XHRsZXQgb3V0cHV0TWFwID0gd3JpdGVNYXBTaW5nbGUocHJvdG8uY29uc3RydWN0b3IsIGxvY2FsTmFtZSwgcHVibGljTmFtZSwgJ291dHB1dE1hcCcpO1xuXHRcdE9iamVjdC5rZXlzKG91dHB1dE1hcCkuZm9yRWFjaChrZXkgPT4gZXZlbnRzLmFkZChrZXkpKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
