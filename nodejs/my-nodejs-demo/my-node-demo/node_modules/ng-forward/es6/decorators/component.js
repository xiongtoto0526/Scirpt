import parseSelector from '../util/parse-selector';
import { providerStore, componentStore, bundleStore } from '../writers';
import { Providers } from './providers';
import Module from '../classes/module';
import directiveControllerFactory from '../util/directive-controller';
import { writeMapMulti } from './input-output';
import { inputsMap } from '../properties/inputs-builder';
import events from '../events/events';
import { createConfigErrorMessage } from '../util/helpers';
const TYPE = 'component';
export const componentHooks = {
    _after: [],
    _extendDDO: [],
    _beforeCtrlInvoke: [],
    _afterCtrlInvoke: [],
    after(fn) {
        this._after.push(fn);
    },
    extendDDO(fn) {
        this._extendDDO.push(fn);
    },
    beforeCtrlInvoke(fn) {
        this._beforeCtrlInvoke.push(fn);
    },
    afterCtrlInvoke(fn) {
        this._afterCtrlInvoke.push(fn);
    }
};
export function Component({ selector, controllerAs, template, templateUrl, providers = [], inputs = [], outputs = [], pipes = [], directives = [] }) {
    return function (t) {
        if (!selector) {
            throw new Error(`Component Decorator Error in "${t.name}": Component selector must be provided`);
        }
        let { name, type: restrict } = parseSelector(selector);
        providerStore.set('name', name, t);
        providerStore.set('type', TYPE, t);
        bundleStore.set('selector', selector, t);
        Providers(...providers)(t, `while analyzing Component '${t.name}' providers`);
        componentStore.set('restrict', restrict, t);
        componentStore.set('scope', {}, t);
        componentStore.set('transclude', true, t);
        componentStore.set('bindToController', true, t);
        [
            ['inputs', inputs],
            ['providers', providers],
            ['directives', directives],
            ['outputs', outputs]
        ].forEach(([propName, propVal]) => {
            if (propVal !== undefined && !Array.isArray(propVal)) {
                throw new TypeError(`Component Decorator Error in "${t.name}": Component ${propName} must be an array`);
            }
        });
        writeMapMulti(t, inputs, 'inputMap');
        let outputMap = writeMapMulti(t, outputs, 'outputMap');
        Object.keys(outputMap).forEach(key => events.add(key));
        if (controllerAs === '$auto') {
            componentStore.set('controllerAs', name, t);
        }
        else if (controllerAs) {
            componentStore.set('controllerAs', controllerAs, t);
        }
        else {
            componentStore.set('controllerAs', 'ctrl', t);
        }
        if (t.link) {
            componentStore.set('link', t.link, t);
        }
        if (t.compile) {
            componentStore.set('compile', t.compile, t);
        }
        View({
            selector,
            template,
            templateUrl,
            pipes,
            directives
        })(t);
    };
}
export function View({ selector, template, templateUrl, pipes = [], directives = [] }) {
    return function (t) {
        if (templateUrl) {
            componentStore.set('templateUrl', templateUrl, t);
        }
        else if (template) {
            componentStore.set('template', template, t);
        }
        else {
            throw new Error(`@Component config must include either a template or a template url for component with selector ${selector} on ${t.name}`);
        }
        Providers(...directives)(t, `while analyzing Component '${t.name}' directives`);
        Providers(...pipes)(t, `while analyzing Component '${t.name}' pipes`);
    };
}
Module.addProvider(TYPE, (target, name, injects, ngModule) => {
    let ddo = {};
    componentStore.forEach((val, key) => ddo[key] = val, target);
    let bindProp = angular.version.minor >= 4 ? 'bindToController' : 'scope';
    ddo[bindProp] = inputsMap(ddo.inputMap);
    if (ddo.restrict !== 'E') {
        throw new Error(createConfigErrorMessage(target, ngModule, `@Component selectors can only be elements. ` +
            `Perhaps you meant to use @Directive?`));
    }
    controller.$inject = ['$scope', '$element', '$attrs', '$transclude', '$injector'];
    function controller($scope, $element, $attrs, $transclude, $injector) {
        let locals = { $scope, $element, $attrs, $transclude };
        return directiveControllerFactory(this, injects, target, ddo, $injector, locals);
    }
    ddo.controller = controller;
    if (ddo.template && ddo.template.replace) {
        ddo.template = ddo.template.replace(/ng-content/g, 'ng-transclude');
    }
    componentHooks._extendDDO.forEach(hook => hook(ddo, target, name, injects, ngModule));
    ngModule.directive(name, () => ddo);
    componentHooks._after.forEach(hook => hook(target, name, injects, ngModule));
});

//# sourceMappingURL=data:application/json;base64,
