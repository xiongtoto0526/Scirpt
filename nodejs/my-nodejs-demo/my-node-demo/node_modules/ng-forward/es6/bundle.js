// # Bundle function
// Takes a root decorated class and generates a Module from it
import { bundleStore } from './writers';
import Module from './classes/module';
import events from './events/events';
import groupModulesAndProviders from './util/group-modules-providers';
export default function bundle(moduleName, provider, otherProviders = []) {
    const getProvidersFrom = (t) => bundleStore.get('providers', t) || [];
    const getModulesFrom = (t) => bundleStore.get('modules', t) || [];
    const setHasProviderWithToken = (_set, token) => [..._set].filter(p => token && p.token === token).length > 0;
    let { modules: startingModules, providers: startingProviders } = groupModulesAndProviders([provider, ...otherProviders], `during bundle entry point for '${moduleName}' module`);
    let providers = new Set();
    let modules = new Set(startingModules);
    function parseProvider(provider) {
        if (provider) {
            if (providers.has(provider) || setHasProviderWithToken(providers, provider.token)) {
                return;
            }
            providers.add(provider);
            let annotated = provider.useClass || provider.useFactory || provider;
            getModulesFrom(annotated).forEach((mod) => modules.add(mod));
            getProvidersFrom(annotated).forEach(parseProvider);
        }
    }
    startingProviders.forEach(parseProvider);
    return Module(moduleName, [...modules]).add(...events.resolve(), ...providers);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9idW5kbGUudHMiXSwibmFtZXMiOlsiYnVuZGxlIiwiYnVuZGxlLnBhcnNlUHJvdmlkZXIiXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiw4REFBOEQ7T0FJdkQsRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXO09BRTlCLE1BQXlCLE1BQU0sa0JBQWtCO09BR2pELE1BQU0sTUFBTSxpQkFBaUI7T0FHN0Isd0JBQXdCLE1BQU0sZ0NBQWdDO0FBT3JFLCtCQUErQixVQUFrQixFQUFFLFFBQWEsRUFBRSxjQUFjLEdBQVUsRUFBRTtJQUUxRkEsTUFBTUEsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFNQSxLQUFLQSxXQUFXQSxDQUFDQSxHQUFHQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtJQUUzRUEsTUFBTUEsY0FBY0EsR0FBR0EsQ0FBQ0EsQ0FBTUEsS0FBS0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7SUFFdkVBLE1BQU1BLHVCQUF1QkEsR0FBR0EsQ0FBQ0EsSUFBY0EsRUFBRUEsS0FBVUEsS0FBS0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsS0FBS0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFJN0hBLElBQUlBLEVBQUNBLE9BQU9BLEVBQUVBLGVBQWVBLEVBQUVBLFNBQVNBLEVBQUVBLGlCQUFpQkEsRUFBQ0EsR0FBR0Esd0JBQXdCQSxDQUFDQSxDQUFDQSxRQUFRQSxFQUFFQSxHQUFHQSxjQUFjQSxDQUFDQSxFQUNySEEsa0NBQWtDQSxVQUFVQSxVQUFVQSxDQUFDQSxDQUFDQTtJQU14REEsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsR0FBR0EsRUFBT0EsQ0FBQ0E7SUFHL0JBLElBQUlBLE9BQU9BLEdBQUdBLElBQUlBLEdBQUdBLENBQWFBLGVBQWVBLENBQUNBLENBQUNBO0lBSW5EQSx1QkFBdUJBLFFBQWFBO1FBQ2xDQyxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUdiQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSx1QkFBdUJBLENBQUNBLFNBQVNBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsRkEsTUFBTUEsQ0FBQ0E7WUFDVEEsQ0FBQ0E7WUFHREEsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFHeEJBLElBQUlBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBLFFBQVFBLElBQUlBLFFBQVFBLENBQUNBLFVBQVVBLElBQUlBLFFBQVFBLENBQUNBO1lBRXJFQSxjQUFjQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFRQSxLQUFLQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVsRUEsZ0JBQWdCQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUNyREEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFHREQsaUJBQWlCQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUd6Q0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FDekNBLEdBQUdBLE1BQU1BLENBQUNBLE9BQU9BLEVBQUVBLEVBQ25CQSxHQUFHQSxTQUFTQSxDQUNiQSxDQUFDQTtBQUNKQSxDQUFDQSIsImZpbGUiOiJsaWIvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gIyBCdW5kbGUgZnVuY3Rpb25cbi8vIFRha2VzIGEgcm9vdCBkZWNvcmF0ZWQgY2xhc3MgYW5kIGdlbmVyYXRlcyBhIE1vZHVsZSBmcm9tIGl0XG5cbi8vICMjIFNldHVwXG4vLyBBbGwgaW5mb3JtYXRpb24gYWJvdXQgdHJhdmVyc2luZyBhIHByb3ZpZGVyIGlzIHdyaXR0ZW4gYnkgdGhlIGFwcFdyaXRlclxuaW1wb3J0IHtidW5kbGVTdG9yZX0gZnJvbSAnLi93cml0ZXJzJztcbi8vIFRoZSBidW5kbGUgaXMgZ29pbmcgdG8gYmUgZ2VuZXJhdGluZyBhIE1vZHVsZSwgc28gd2UnbGwgbmVlZCB0aGlzXG5pbXBvcnQgTW9kdWxlLCB7RGVjb3JhdGVkTW9kdWxlfSBmcm9tICcuL2NsYXNzZXMvbW9kdWxlJztcbi8vIEV2ZW50cyBpcyBhIHV0aWxpdHkgZm9yIGdlbmVyYXRpbmcgc2VtaS1keW5hbWljIGV2ZW50cy4gSXQgd2lsbCBiZSBnZW5lcmF0aW5nXG4vLyBhIGxvdCBvZiBhdHRyaWJ1dGUgZGlyZWN0aXZlcyBmb3IgZXZlbnQgaGFuZGxpbmcuXG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzL2V2ZW50cyc7XG4vLyBUYWtlcyBhbiBhcnJheSBvZiBiaW5kaW5ncyBhbmQgc2VwYXJhdGVzIGl0IGludG8gZGVjb3JhdGVkIGNsYXNzZXMgYW5kIHN0cmluZ1xuLy8gbmFtZXMuIFVzdWFsbHkgdGhlc2Ugc3RyaW5nIG5hbWVzIGFyZSB0aGUgbmFtZXMgb2YgYW5ndWxhciBtb2R1bGVzLlxuaW1wb3J0IGdyb3VwTW9kdWxlc0FuZFByb3ZpZGVycyBmcm9tICcuL3V0aWwvZ3JvdXAtbW9kdWxlcy1wcm92aWRlcnMnO1xuXG4vLyAjIyBCdW5kbGVcbi8vIFRoZSBidW5kbGUgZnVuY3Rpb24uIFBhc3MgaXQgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB5b3Ugd2FudCB0byBnZW5lcmF0ZSwgdGhlIHJvb3Rcbi8vIHByb3ZpZGVyLCBhbmQgYW4gb3B0aW9uIGxpc3Qgb2YgYWRkaXRpb25hbCBiaW5kaW5ncyB0aGUgcHJvdmlkZXIgbWF5IG5lZWQgdG9cbi8vIHN1Y2Nlc3NmdWxseSBib290c3RyYXAuIFRoZSBpZGVhIGlzIHRoYXQgeW91IG9ubHkgbmVlZCB0byBwcm92aWRlIGJpbmRpbmdzIGlmIHlvdVxuLy8gYXJlIHRlc3RpbmcgYSBjb21wb25lbnQgb3Igc2VydmljZSBpbiBpc29sYXRpb25cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1bmRsZShtb2R1bGVOYW1lOiBzdHJpbmcsIHByb3ZpZGVyOiBhbnksIG90aGVyUHJvdmlkZXJzOiBhbnlbXSA9IFtdKTpEZWNvcmF0ZWRNb2R1bGUge1xuICAvLyBHZXQgYSBsaXN0IG9mIGRlY29yYXRlZCBjbGFzc2VzIHRoYXQgc29tZSBkZWNvcmF0ZWQgY2xhc3MgYHRgIGRlcGVuZHMgb25cbiAgY29uc3QgZ2V0UHJvdmlkZXJzRnJvbSA9ICh0OiBhbnkpID0+IGJ1bmRsZVN0b3JlLmdldCgncHJvdmlkZXJzJywgdCkgfHwgW107XG4gIC8vIEdldCBhIGxpc3Qgb2YgYGFuZ3VsYXIubW9kdWxlYCBuYW1lcyBzb21lIGRlY29yYXRlZCBjbGFzcyBgdGAgZGVwZW5kcyBvblxuICBjb25zdCBnZXRNb2R1bGVzRnJvbSA9ICh0OiBhbnkpID0+IGJ1bmRsZVN0b3JlLmdldCgnbW9kdWxlcycsIHQpIHx8IFtdO1xuICAvLyBMb29rIGluIGEgU2V0IG9mIFByb3ZpZGVycyB0byBzZWUgaWYgaXQgY29udGFpbnMgb25lIHdpdGggYSBzcGVjaWZpYyB0b2tlblxuICBjb25zdCBzZXRIYXNQcm92aWRlcldpdGhUb2tlbiA9IChfc2V0OiBTZXQ8YW55PiwgdG9rZW46IGFueSkgPT4gWy4uLl9zZXRdLmZpbHRlcihwID0+IHRva2VuICYmIHAudG9rZW4gPT09IHRva2VuKS5sZW5ndGggPiAwO1xuXG4gIC8vIEtpY2sgdGhlIHByb2Nlc3Mgb2ZmIGJ5IGdldHRpbmcgdGhlIGxpc3Qgb2YgYGFuZ3VsYXIubW9kdWxlYHMgYW5kIGRlY29yYXRlZFxuICAvLyBjbGFzc2VzIHRoZSByb290IHByb3ZpZGVyIHJlcXVpcmVzXG4gIGxldCB7bW9kdWxlczogc3RhcnRpbmdNb2R1bGVzLCBwcm92aWRlcnM6IHN0YXJ0aW5nUHJvdmlkZXJzfSA9IGdyb3VwTW9kdWxlc0FuZFByb3ZpZGVycyhbcHJvdmlkZXIsIC4uLm90aGVyUHJvdmlkZXJzXSxcbiAgYGR1cmluZyBidW5kbGUgZW50cnkgcG9pbnQgZm9yICcke21vZHVsZU5hbWV9JyBtb2R1bGVgKTtcblxuICAvLyBUaGlzIHNldCB3aWxsIGJlIHVzZWQgdG8gaG9sZCBwcm92aWRlcnMgYXMgdGhleSBhcmUgdHJhdmVyc2VkLlxuICAvLyBTaW5jZSBzZXRzIGNhbiBvbmx5IGNvbnRhaW4gdW5pcXVlIHZhbHVlcywgd2UnbGwgdXNlIHRoaXMgc2V0IHRvIHNlZSBpZiB0aGUgcHJvdmlkZXJcbiAgLy8gaGFzIGFscmVhZHkgYmVlbiB0cmF2ZXJzZWQuIFRoaXMgd2lsbCBwcmV2ZW50IGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHByb3ZpZGVyc1xuICAvLyBiZWluZyBhZGRlZCBtdWx0aXBsZSB0aW1lcy5cbiAgbGV0IHByb3ZpZGVycyA9IG5ldyBTZXQ8YW55PigpO1xuICAvLyBDcmVhdGUgYSBuZXcgc2V0IG9mIGBhbmd1bGFyLm1vZHVsZWBzIGJhc2VkIG9uIHRoZSBtb2R1bGVzIHJlcXVpcmVkIGJ5IHRoZVxuICAvLyByb290IHByb3ZpZGVyXG4gIGxldCBtb2R1bGVzID0gbmV3IFNldDxuZy5JTW9kdWxlPihzdGFydGluZ01vZHVsZXMpO1xuXG4gIC8vIFJlY3Vyc2l2ZSBwYXJzaW5nIGZ1bmN0aW9uLiBUYWtlcyBhIHByb3ZpZGVyIGFuZCBhZGRzIG1vZHVsZXMgdG8gdGhlIG1vZHVsZXNcbiAgLy8gc2V0LiBUaGVuIHRyYXZlcnNlcyB0aGUgcHJvdmlkZXJzIGl0IGRlcGVuZHMgb24uXG4gIGZ1bmN0aW9uIHBhcnNlUHJvdmlkZXIocHJvdmlkZXI6IGFueSl7XG4gICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIHByb3ZpZGVyIGlzIGRlZmluZWQgYW5kIGhhc24ndCBiZWVuIHRyYXZlcnNlZCBhbHJlYWR5XG4gICAgICAvLyB0b2RvOiBkbyBhIGJldHRlciBjaGVjayBvZiBib3RoIHRva2VuIGFuZCB2YWx1ZSwgZmlndXJlIG91dCBpZiB3ZSB3YW50IHRvIG92ZXJ3cml0ZSBvciBkaXNjYXJkIGR1cGxpY2F0ZVxuICAgICAgaWYgKHByb3ZpZGVycy5oYXMocHJvdmlkZXIpIHx8IHNldEhhc1Byb3ZpZGVyV2l0aFRva2VuKHByb3ZpZGVycywgcHJvdmlkZXIudG9rZW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHRoZSBwcm92aWRlciB0byB0aGUgcHJvdmlkZXJzIHNldFxuICAgICAgcHJvdmlkZXJzLmFkZChwcm92aWRlcik7XG5cbiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgdXNlQ2xhc3MgcHJvdmlkZXIncyBhbm5vdGF0ZWQgY2xhc3MsIG9yIHRoZSByYXcgYW5ub3RhdGVkIGNsYXNzXG4gICAgICBsZXQgYW5ub3RhdGVkID0gcHJvdmlkZXIudXNlQ2xhc3MgfHwgcHJvdmlkZXIudXNlRmFjdG9yeSB8fCBwcm92aWRlcjtcbiAgICAgIC8vIEFkZCB0aGUgYW5ub3RhdGVkIGNsYXNzJyBtb2R1bGVzIHRvIHRoZSBtb2R1bGVzIHNldFxuICAgICAgZ2V0TW9kdWxlc0Zyb20oYW5ub3RhdGVkKS5mb3JFYWNoKChtb2Q6IGFueSkgPT4gbW9kdWxlcy5hZGQobW9kKSk7XG4gICAgICAvLyBQYXJzZSB0aGUgYW5ub3RhdGVkIGNsYXNzJyBpbm5lciBwcm92aWRlcnNcbiAgICAgIGdldFByb3ZpZGVyc0Zyb20oYW5ub3RhdGVkKS5mb3JFYWNoKHBhcnNlUHJvdmlkZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRha2UgdGhlIGFycmF5IG9mIHN0YXJ0aW5nIHByb3ZpZGVycyBhbmQgYmVnaW4gdGhlIHRyYXZlcnNhbFxuICBzdGFydGluZ1Byb3ZpZGVycy5mb3JFYWNoKHBhcnNlUHJvdmlkZXIpO1xuXG4gIC8vIENyZWF0ZSBvdXIgTW9kdWxlIGFuZCBhZGQgYWxsIG9mIHRoZSBwcm92aWRlcnMgd2UgZm91bmQgZHVyaW5nIHRyYXZlcnNhbFxuICByZXR1cm4gTW9kdWxlKG1vZHVsZU5hbWUsIFsuLi5tb2R1bGVzXSkuYWRkKFxuICAgIC4uLmV2ZW50cy5yZXNvbHZlKCksXG4gICAgLi4ucHJvdmlkZXJzXG4gICk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
