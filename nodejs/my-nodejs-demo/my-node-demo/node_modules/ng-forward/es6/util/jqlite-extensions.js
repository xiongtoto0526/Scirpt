import { getInjectableName } from './get-injectable-name';
(function extendJQLite(proto) {
    Object.defineProperties(proto, {
        nativeElement: {
            get() {
                return this[0];
            }
        },
        componentInstance: {
            get() {
                if (this._componentInstance)
                    return this._componentInstance;
                let isolateScope = this.isolateScope();
                this._componentInstance = isolateScope && isolateScope['ctrl'] || null;
                return this._componentInstance;
            }
        },
        componentViewChildren: {
            get() {
                return [...this.children()].map(child => angular.element(child));
            }
        },
        getLocal: {
            value: function (injectable) {
                return (this.injector() || this.inheritedData('$injector'))
                    .get(getInjectableName(injectable));
            }
        },
        query: {
            value: function (predicate, scope) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        queryAll: {
            value: function (predicate, scope) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        getDirectiveInstance: {
            value: function (index) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        triggerEventHandler: {
            value: function (eventName, eventObj) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        inject: {
            value: function (type) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        hasDirective: {
            value: function (type) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        }
    });
})(angular.element.prototype);
export default angular.element;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsL2pxbGl0ZS1leHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbImV4dGVuZEpRTGl0ZSIsImV4dGVuZEpRTGl0ZS5nZXQiXSwibWFwcGluZ3MiOiJPQUNPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUI7QUEyQnZELENBQUMsc0JBQXNCLEtBQXNCO0lBQzNDQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEtBQUtBLEVBQUVBO1FBRTdCQSxhQUFhQSxFQUFFQTtZQUNiQSxHQUFHQTtnQkFDREMsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLENBQUNBO1NBQ0ZEO1FBRURBLGlCQUFpQkEsRUFBRUE7WUFDakJBLEdBQUdBO2dCQUNEQyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBO29CQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBO2dCQUM1REEsSUFBSUEsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7Z0JBQ3ZDQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLFlBQVlBLElBQUlBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLElBQUlBLENBQUNBO2dCQUN2RUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtZQUNqQ0EsQ0FBQ0E7U0FDRkQ7UUFFREEscUJBQXFCQSxFQUFFQTtZQUNyQkEsR0FBR0E7Z0JBQ0RDLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLElBQUlBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ25FQSxDQUFDQTtTQUNGRDtRQUVEQSxRQUFRQSxFQUFFQTtZQUNSQSxLQUFLQSxFQUFFQSxVQUFTQSxVQUFVQTtnQkFFeEIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7cUJBQ3RELEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzFDLENBQUM7U0FDRkE7UUFFREEsS0FBS0EsRUFBRUE7WUFDTEEsS0FBS0EsRUFBRUEsVUFBU0EsU0FBU0EsRUFBRUEsS0FBS0E7Z0JBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtZQUN2RCxDQUFDO1NBQ0ZBO1FBRURBLFFBQVFBLEVBQUVBO1lBQ1JBLEtBQUtBLEVBQUVBLFVBQVNBLFNBQVNBLEVBQUVBLEtBQUtBO2dCQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUE7WUFDdkQsQ0FBQztTQUNGQTtRQUVEQSxvQkFBb0JBLEVBQUVBO1lBQ3BCQSxLQUFLQSxFQUFFQSxVQUFTQSxLQUFLQTtnQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO1lBQ3ZELENBQUM7U0FDRkE7UUFFREEsbUJBQW1CQSxFQUFFQTtZQUNuQkEsS0FBS0EsRUFBRUEsVUFBU0EsU0FBU0EsRUFBRUEsUUFBUUE7Z0JBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtZQUN2RCxDQUFDO1NBQ0ZBO1FBRURBLE1BQU1BLEVBQUVBO1lBQ05BLEtBQUtBLEVBQUVBLFVBQVNBLElBQUlBO2dCQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7WUFDeEQsQ0FBQztTQUNGQTtRQUVEQSxZQUFZQSxFQUFFQTtZQUNaQSxLQUFLQSxFQUFFQSxVQUFTQSxJQUFJQTtnQkFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1lBQ3hELENBQUM7U0FDRkE7S0FFRkEsQ0FBQ0EsQ0FBQ0E7QUFFTEEsQ0FBQ0EsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFOUIsZUFBZSxPQUFPLENBQUMsT0FBTyxDQUFDIiwiZmlsZSI6ImxpYi91dGlsL2pxbGl0ZS1leHRlbnNpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtkYXNoVG9DYW1lbH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7Z2V0SW5qZWN0YWJsZU5hbWV9IGZyb20gJy4vZ2V0LWluamVjdGFibGUtbmFtZSc7XG5pbXBvcnQgSlF1ZXJ5IGZyb20gXCIuL1wiO1xuaW1wb3J0IElBdWdtZW50ZWRKUXVlcnkgPSBhbmd1bGFyLklBdWdtZW50ZWRKUXVlcnk7XG5pbXBvcnQgSUF1Z21lbnRlZEpRdWVyeVN0YXRpYyA9IGFuZ3VsYXIuSUF1Z21lbnRlZEpRdWVyeVN0YXRpYztcblxuZXhwb3J0IGludGVyZmFjZSBJTmdGb3J3YXJkSlF1ZXJ5U3RhdGljIGV4dGVuZHMgSUF1Z21lbnRlZEpRdWVyeVN0YXRpYyB7XG4gIChzZWxlY3Rvcjogc3RyaW5nLCBjb250ZXh0PzogYW55KTogSU5nRm9yd2FyZEpRdWVyeTtcbiAgKGVsZW1lbnQ6IGFueSk6IElOZ0ZvcndhcmRKUXVlcnk7XG4gIChvYmplY3Q6IHt9KTogSU5nRm9yd2FyZEpRdWVyeTtcbiAgKGVsZW1lbnRBcnJheTogYW55W10pOiBJTmdGb3J3YXJkSlF1ZXJ5O1xuICAob2JqZWN0OiBKUXVlcnkpOiBJTmdGb3J3YXJkSlF1ZXJ5O1xuICAoZnVuYzogRnVuY3Rpb24pOiBJTmdGb3J3YXJkSlF1ZXJ5O1xuICAoYXJyYXk6IGFueVtdKTogSU5nRm9yd2FyZEpRdWVyeTtcbiAgKCk6IElOZ0ZvcndhcmRKUXVlcnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5nRm9yd2FyZEpRdWVyeSBleHRlbmRzIElBdWdtZW50ZWRKUXVlcnkge1xuICBmaW5kKHNlbGVjdG9yOiBzdHJpbmcpOiBJTmdGb3J3YXJkSlF1ZXJ5O1xuICBmaW5kKGVsZW1lbnQ6IGFueSk6IElOZ0ZvcndhcmRKUXVlcnk7XG4gIGZpbmQob2JqOiBKUXVlcnkpOiBJTmdGb3J3YXJkSlF1ZXJ5O1xuXG4gIG5hdGl2ZUVsZW1lbnQ6IGFueTtcbiAgY29tcG9uZW50SW5zdGFuY2U6IGFueTtcbiAgY29tcG9uZW50Vmlld0NoaWxkcmVuOiBJTmdGb3J3YXJkSlF1ZXJ5W107XG4gIGdldExvY2FsKGluamVjdGFibGU6YW55KTogYW55O1xufVxuXG4oZnVuY3Rpb24gZXh0ZW5kSlFMaXRlKHByb3RvOklBdWdtZW50ZWRKUXVlcnkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJvdG8sIHtcblxuICAgIG5hdGl2ZUVsZW1lbnQ6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNvbXBvbmVudEluc3RhbmNlOiB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRJbnN0YW5jZSkgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICBsZXQgaXNvbGF0ZVNjb3BlID0gdGhpcy5pc29sYXRlU2NvcGUoKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SW5zdGFuY2UgPSBpc29sYXRlU2NvcGUgJiYgaXNvbGF0ZVNjb3BlWydjdHJsJ10gfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnRWaWV3Q2hpbGRyZW46IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmNoaWxkcmVuKCldLm1hcChjaGlsZCA9PiBhbmd1bGFyLmVsZW1lbnQoY2hpbGQpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0TG9jYWw6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihpbmplY3RhYmxlKSB7XG4gICAgICAgIC8vbm9pbnNwZWN0aW9uIFR5cGVTY3JpcHRVbnJlc29sdmVkRnVuY3Rpb25cbiAgICAgICAgcmV0dXJuICh0aGlzLmluamVjdG9yKCkgfHwgdGhpcy5pbmhlcml0ZWREYXRhKCckaW5qZWN0b3InKSlcbiAgICAgICAgICAgIC5nZXQoZ2V0SW5qZWN0YWJsZU5hbWUoaW5qZWN0YWJsZSkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBxdWVyeToge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgc2NvcGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkIGluIG5nLWZvcndhcmQuJylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcXVlcnlBbGw6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihwcmVkaWNhdGUsIHNjb3BlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHlldCBpbXBsZW1lbnRlZCBpbiBuZy1mb3J3YXJkLicpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldERpcmVjdGl2ZUluc3RhbmNlOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkIGluIG5nLWZvcndhcmQuJylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdHJpZ2dlckV2ZW50SGFuZGxlcjoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZXZlbnRPYmopIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkIGluIG5nLWZvcndhcmQuJylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5qZWN0OiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gbmctZm9yd2FyZC4nKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFzRGlyZWN0aXZlOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gbmctZm9yd2FyZC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7XG5cbn0pKGFuZ3VsYXIuZWxlbWVudC5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLmVsZW1lbnQ7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
