import inputsBuilder from '../properties/inputs-builder';
import outputsBuilder from '../properties/outputs-builder';
import { componentHooks } from '../decorators/component';
export default function (caller, injects, controller, ddo, $injector, locals) {
    let instance = Object.create(controller.prototype);
    for (let key in ddo.inputMap) {
        inputsBuilder(instance, key, ddo.inputMap[key]);
    }
    Object.assign(instance, caller);
    componentHooks._beforeCtrlInvoke.forEach(hook => hook(caller, injects, controller, ddo, $injector, locals));
    $injector.invoke([...injects, controller], instance, locals);
    componentHooks._afterCtrlInvoke.forEach(hook => hook(caller, injects, controller, ddo, $injector, locals));
    let { $element, $scope } = locals;
    outputsBuilder(instance, $element, $scope, ddo.outputMap || {});
    return instance;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsL2RpcmVjdGl2ZS1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQVNPLGFBQWEsTUFBTSw4QkFBOEI7T0FFakQsY0FBYyxNQUFNLCtCQUErQjtPQUNuRCxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QjtBQUt0RCx5QkFBd0IsTUFBVyxFQUFFLE9BQWlCLEVBQUUsVUFBZSxFQUFFLEdBQVEsRUFBRSxTQUFjLEVBQUUsTUFBVztJQUU1RyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUduRCxHQUFHLENBQUEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBSUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFaEMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUk1RyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTdELGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFJM0csSUFBSSxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsR0FBNkMsTUFBTSxDQUFDO0lBQzFFLGNBQWMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBR2hFLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQyIsImZpbGUiOiJsaWIvdXRpbC9kaXJlY3RpdmUtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBPYmplY3QgKi9cbi8vICMgRGlyZWN0aXZlIENvbnRyb2xsZXIgRmFjdG9yeVxuLy8gV2hpbGUgd2Ugd2FudCB0byB1c2UgdGhlIGNvbXBvbmVudCBjb250cm9sbGVyLCB3ZSBuZWVkIGEgd2F5IHRvIGFkZCBvdXIgb3duXG4vLyBwcm9wZXJ0aWVzIHRvIHRoZSBjb250cm9sbGVyIGluc3RhbmNlIGJlZm9yZSB0aGUgY29uc3RydWN0b3IgaXMgY2FsbGVkLiBXZSBhbHNvXG4vLyB3YW50IHRvIGRvIHRoaXMgaW4gdGhlIGNvbnRleHQgb2YgQW5ndWxhcidzIERJIHNvIHRoYXQgd2UgY2FuIGFjY2VzcyB0aGUgJGVsZW1lbnRcbi8vIGZvciBldmVudHMgYW5kICRmaWx0ZXIgZm9yIHByb3BlcnRpZXMuXG4vL1xuLy8gIyMgU2V0dXBcbi8vIFdlJ2xsIG5lZWQgYTFhdHNjcmlwdCdzIGlucHV0c0J1aWxkZXIgZm9yIGdlbmVyYXRpbmcgdGhlIHByb3BlcnR5IGRlZmluaXRpb25zXG5pbXBvcnQgaW5wdXRzQnVpbGRlciBmcm9tICcuLi9wcm9wZXJ0aWVzL2lucHV0cy1idWlsZGVyJztcbi8vIEFsc28gbmVlZCB0aGUgb3V0cHV0c0J1aWxkZXIgZm9yIGNyZWF0aW5nIGV2ZW50IGVtaXR0ZXJzXG5pbXBvcnQgb3V0cHV0c0J1aWxkZXIgZnJvbSAnLi4vcHJvcGVydGllcy9vdXRwdXRzLWJ1aWxkZXInO1xuaW1wb3J0IHtjb21wb25lbnRIb29rc30gZnJvbSAnLi4vZGVjb3JhdG9ycy9jb21wb25lbnQnO1xuXG4vLyAjIyBGYWN0b3J5XG4vLyBOZWVkcyB0aGUgaW5qZWN0aW9uIGFycmF5LCB0aGUgY29udHJvbGxlciBjbGFzcywgYW5kIHRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvblxuLy8gb2JqZWN0IGluIG9yZGVyIHRvIGdlbmVyYXRlIHRoZSBjb250cm9sbGVyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsZXI6IGFueSwgaW5qZWN0czogc3RyaW5nW10sIGNvbnRyb2xsZXI6IGFueSwgZGRvOiBhbnksICRpbmplY3RvcjogYW55LCBsb2NhbHM6IGFueSk6IGFueXtcbiAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBjb250cm9sbGVyIHdpdGhvdXQgY2FsbGluZyBpdHMgY29uc3RydWN0b3JcbiAgbGV0IGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb250cm9sbGVyLnByb3RvdHlwZSk7XG4gIC8vIFVzZSBhMWF0c2NyaXB0J3MgaW5wdXRzQnVpbGRlciB0byBhZGQgdGhlIGdldHRlcnMvc2V0dGVycyB0aGVuIHN1Z2FyXG4gIC8vIG92ZXIgYD1gIGFuZCBgQGAgYmluZGluZ3NcbiAgZm9yKGxldCBrZXkgaW4gZGRvLmlucHV0TWFwKSB7XG4gICAgaW5wdXRzQnVpbGRlcihpbnN0YW5jZSwga2V5LCBkZG8uaW5wdXRNYXBba2V5XSk7XG4gIH1cbiAgLy8gUmVtZW1iZXIsIGFuZ3VsYXIgaGFzIGFscmVhZHkgc2V0IHRob3NlIGJpbmRpbmdzIG9uIHRoZSBgY2FsbGVyYFxuICAvLyBhcmd1bWVudC4gTm93IHdlIG5lZWQgdG8gZXh0ZW5kIHRoZW0gb250byBvdXIgYGluc3RhbmNlYC4gSXQgaXMgaW1wb3J0YW50XG4gIC8vIHRvIGV4dGVuZCBhZnRlciBkZWZpbmluZyB0aGUgcHJvcGVydGllcy4gVGhhdCB3YXkgd2UgZmlyZSB0aGUgc2V0dGVycy5cbiAgT2JqZWN0LmFzc2lnbihpbnN0YW5jZSwgY2FsbGVyKTtcblxuICBjb21wb25lbnRIb29rcy5fYmVmb3JlQ3RybEludm9rZS5mb3JFYWNoKGhvb2sgPT4gaG9vayhjYWxsZXIsIGluamVjdHMsIGNvbnRyb2xsZXIsIGRkbywgJGluamVjdG9yLCBsb2NhbHMpKTtcblxuICAvLyBGaW5hbGx5LCBpbnZva2UgdGhlIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBpbmplY3Rpb24gYXJyYXkgYW5kIHRoZSBjYXB0dXJlZFxuICAvLyBsb2NhbHNcbiAgJGluamVjdG9yLmludm9rZShbLi4uaW5qZWN0cywgY29udHJvbGxlcl0sIGluc3RhbmNlLCBsb2NhbHMpO1xuXG4gIGNvbXBvbmVudEhvb2tzLl9hZnRlckN0cmxJbnZva2UuZm9yRWFjaChob29rID0+IGhvb2soY2FsbGVyLCBpbmplY3RzLCBjb250cm9sbGVyLCBkZG8sICRpbmplY3RvciwgbG9jYWxzKSk7XG5cbiAgLy8gT3V0cHV0cyB3b3JrIHNpbWlsYXJseSwgYnV0IHRoZXkgbmVlZCB0aGUgcmF3ICRlbGVtZW50IGFuZCB0aGUgJHNjb3BlIGZvclxuICAvLyBkZXN0cm95aW5nIG91dHB1dCBvYnNlcnZhYmxlcy5cbiAgbGV0IHskZWxlbWVudCwgJHNjb3BlfSA6IHsgJGVsZW1lbnQ6IEpRdWVyeSwgJHNjb3BlOiBuZy5JU2NvcGUgfSA9IGxvY2FscztcbiAgb3V0cHV0c0J1aWxkZXIoaW5zdGFuY2UsICRlbGVtZW50LCAkc2NvcGUsIGRkby5vdXRwdXRNYXAgfHwge30pO1xuXG4gIC8vIFJldHVybiB0aGUgY29udHJvbGxlciBpbnN0YW5jZVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
