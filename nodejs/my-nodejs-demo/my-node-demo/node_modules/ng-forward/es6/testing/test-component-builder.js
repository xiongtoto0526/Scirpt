import bundle from '../bundle';
import { allProviders, clearProviders } from './providers';
import { bundleStore, componentStore } from '../writers';
import { View } from '../decorators/component';
export class TestComponentBuilder {
    create(rootComponent) {
        let decoratedModule = bundle('test.module', rootComponent);
        angular.mock.module(decoratedModule.name);
        angular.mock.module($provide => allProviders().forEach(({ token, useValue }) => $provide.value(token, useValue)));
        let fixture = compileComponent(rootComponent);
        clearProviders();
        return fixture;
    }
    createAsync(rootComponent) {
        let fixture = this.create(rootComponent);
        return Promise.resolve(fixture);
    }
    overrideTemplate(component, template) {
        componentStore.set('template', template, component);
        return this;
    }
    overrideProviders(component, providers) {
        bundleStore.set('providers', providers, component);
        return this;
    }
    overrideView(component, config) {
        View(config)(component);
        return this;
    }
    overrideDirective() { throw new Error('Method not supported in ng-forward.'); }
    overrideViewBindings() { throw new Error('Method not supported in ng-forward.'); }
}
export class ComponentFixture {
    constructor({ debugElement, rootTestScope, $injector }) {
        this.debugElement = debugElement;
        this.debugElement.data('$injector', $injector);
        this.componentInstance = debugElement.componentInstance;
        this.nativeElement = debugElement.nativeElement;
        this.rootTestScope = rootTestScope;
    }
    detectChanges() {
        this.rootTestScope.$digest();
    }
}
export function compileComponent(ComponentClass) {
    let selector = bundleStore.get('selector', ComponentClass), rootTestScope, debugElement, componentInstance, $injector;
    inject(($compile, $rootScope, _$injector_) => {
        let controllerAs = componentStore.get('controllerAs', ComponentClass);
        componentInstance = new ComponentClass();
        rootTestScope = $rootScope.$new();
        debugElement = angular.element(`<${selector}></${selector}>`);
        debugElement = $compile(debugElement)(rootTestScope);
        rootTestScope.$digest();
        $injector = _$injector_;
    });
    return new ComponentFixture({ debugElement, rootTestScope, $injector });
}
export function compileHtmlAndScope({ html, initialScope, selector }) {
    let parentScope, element, controller, isolateScope;
    inject(($compile, $rootScope) => {
        parentScope = $rootScope.$new();
        Object.assign(parentScope, initialScope);
        element = angular.element(html);
        element = $compile(element)(parentScope);
        parentScope.$digest();
        isolateScope = element.isolateScope();
        controller = element.controller(`${selector}`);
    });
    return { parentScope, element, controller, isolateScope };
}

//# sourceMappingURL=data:application/json;base64,
