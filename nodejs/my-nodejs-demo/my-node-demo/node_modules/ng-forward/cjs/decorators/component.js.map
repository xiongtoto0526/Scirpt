{"version":3,"sources":["/source/decorators/lib/decorators/component.ts"],"names":["after","extendDDO","beforeCtrlInvoke","afterCtrlInvoke","Component","View","controller"],"mappings":"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","file":"decorators/component.js","sourcesContent":["// # Component Decorator\n// Provides a robust component decorator that attempts to polyfill many Angular 2\n// features while still providing an excellent, testable Angular 1 component strategy\n//\n// ## Usage\n// ```js\n// import {Component, EventEmitter, Inject} from 'ng-forward';\n// import {Messenger} from '../messenger';\n//\n// @Component({\n// \tselector: 'send-message',\n// \toutputs: ['sent'],\n// \tinputs: ['messageSubject: subject'],\n// \tbind: [Messenger]\n// \ttemplate: `\n// \t\t<textarea ng-model=\"ctrl.body\"></textarea>\n// \t\t<button on-click=\"ctrl.send()\"></textarea>\n// \t`\n// })\n// @Inject(Messenger)\n// export class SendMessage{\n// \tthis.sent = new EventEmitter();\n// \tconstructor(Messenger){\n// \t\tthis.Messenger = Messenger;\n// \t\tthis.message = '';\n// \t}\n// \tasync send(){\n// \t\tlet message = await this.Messenger.create(this.subject, this.message);\n// \t\tthis.sent.next(message);\n// \t}\n// }\n//```\n// In your HTML:\n// ```html\n// <send-message subject=\"Hello, World!\" (sent)=\"sent($event)\"></send-message>\n// ```\n// ## Setup\n// `parseSelector` takes some simple CSS selector and returns a camelCased version\n// of the selector as well as the type of selector it was (element, attribute, or\n// CSS class).\nimport parseSelector from '../util/parse-selector';\n// `providerStore` sets up provider information, `componentStore` writes the DDO,\n// and `appWriter` sets up app traversal/bootstrapping information.\nimport {providerStore, componentStore, bundleStore} from '../writers';\n// Takes the information from `config.providers` and turns it into the actual metadata\n// needed during app traversal\nimport {Providers} from './providers';\n// Provider parser will need to be registered with Module\nimport Module from '../classes/module';\nimport directiveControllerFactory from '../util/directive-controller';\nimport {writeMapMulti} from './input-output';\nimport {inputsMap} from '../properties/inputs-builder';\nimport events from '../events/events';\nimport {createConfigErrorMessage} from '../util/helpers';\n\nconst TYPE = 'component';\n\nexport const componentHooks = {\n\t_after: [],\n\t_extendDDO: [],\n\t_beforeCtrlInvoke: [],\n\t_afterCtrlInvoke: [],\n\n\tafter(fn: (target: any, name: string, injects: string[], ngModule: ng.IModule) => any){\n\t\tthis._after.push(fn)\n\t},\n\textendDDO(fn: (ddo: any, target: any, name: string, injects: string[], ngModule: ng.IModule) => any){\n\t\tthis._extendDDO.push(fn)\n\t},\n\tbeforeCtrlInvoke(fn: (caller: any, injects: string[], controller: any, ddo: any, $injector: any, locals: any) => any){\n\t\tthis._beforeCtrlInvoke.push(fn)\n\t},\n\tafterCtrlInvoke(fn: (caller: any, injects: string[], controller: any, ddo: any, $injector: any, locals: any) => any){\n\t\tthis._afterCtrlInvoke.push(fn)\n\t}\n};\n\n// ## Decorator Definition\nexport function Component(\n\t\t{\n\t\t\tselector,\n\t\t\tcontrollerAs,\n\t\t\ttemplate,\n\t\t\ttemplateUrl,\n\t\t\tproviders = [],\n\t\t\tinputs = [],\n\t\t\toutputs = [],\n\t\t\tpipes = [],\n\t\t\tdirectives = []\n\t\t} :\n\t\t{\n\t\t\tselector: string,\n\t\t\tcontrollerAs?: string,\n\t\t\ttemplate?: string,\n\t\t\ttemplateUrl?: string,\n\t\t\tproviders?: any[],\n\t\t\tinputs?: string[],\n\t\t\toutputs?: string[],\n\t\t\tpipes?: any[],\n\t\t\tdirectives?: any[]\n\t\t}\n\t){\n\treturn function(t: any){\n\t\t// The only required config is a selector. If one wasn't passed, throw immediately\n\t\tif( !selector ) {\n\t\t\tthrow new Error(`Component Decorator Error in \"${t.name}\": Component selector must be provided`);\n\t\t}\n\n\t\t// Grab the provider name and selector type by parsing the selector\n\t\tlet {name, type: restrict} = parseSelector(selector);\n\n\t\t// Setup provider information using the parsed selector\n\t\tproviderStore.set('name', name, t);\n\t\tproviderStore.set('type', TYPE, t);\n\n\t\t// The appWriter needs the raw selector. This lets it bootstrap the root component\n\t\tbundleStore.set('selector', selector, t);\n\n\t\t// Grab the providers from the config object, parse them, and write the metadata\n\t\t// to the target.\n\t\tProviders(...providers)(t, `while analyzing Component '${t.name}' providers`);\n\n\t\t// Restrict type must be 'element'\n\t\tcomponentStore.set('restrict', restrict, t);\n\n\t\t// Components should always create an isolate scope\n\t\tcomponentStore.set('scope', {}, t);\n\n\t\t// Since components must have a template, set transclude to true\n\t\tcomponentStore.set('transclude', true, t);\n\n\t\t// Inputs should always be bound to the controller instance, not\n\t\t// to the scope\n\t\tcomponentStore.set('bindToController', true, t);\n\n\t\t// Must perform some basic shape checking on the config object\n\t\t[\n\t\t\t['inputs', inputs],\n\t\t\t['providers', providers],\n\t\t\t['directives', directives],\n\t\t\t['outputs', outputs]\n\t\t].forEach(([propName, propVal]) => {\n\t\t\tif(propVal !== undefined && !Array.isArray(propVal)){\n\t\t\t\tthrow new TypeError(`Component Decorator Error in \"${t.name}\": Component ${propName} must be an array`);\n\t\t\t}\n\t\t});\n\n\t\twriteMapMulti(t, inputs, 'inputMap');\n\n\t\tlet outputMap = writeMapMulti(t, outputs, 'outputMap');\n\t\tObject.keys(outputMap).forEach(key => events.add(key));\n\n\n\t\t// Allow for renaming the controllerAs\n\t\tif(controllerAs === '$auto') {\n\t\t\t// ControllerAs is the parsed selector. For example, `app` becomes `app` and\n\t\t\t// `send-message` becomes `sendMessage`\n\t\t\tcomponentStore.set('controllerAs', name, t);\n\t\t} else if (controllerAs) {\n\t\t\t// set to what was provided\n\t\t\tcomponentStore.set('controllerAs', controllerAs, t);\n\t\t} else {\n\t\t\t// set to default of 'ctrl'\n\t\t\tcomponentStore.set('controllerAs', 'ctrl', t);\n\t\t}\n\n\t\t// Set a link function\n\t\tif(t.link) {\n\t\t\tcomponentStore.set('link', t.link, t);\n\t\t}\n\n\t\t// Set a compile function\n\t\tif(t.compile){\n\t\t\tcomponentStore.set('compile', t.compile, t);\n\t\t}\n\n\t\tView({\n\t\t\tselector,\n\t\t\ttemplate,\n\t\t\ttemplateUrl,\n\t\t\tpipes,\n\t\t\tdirectives\n\t\t})(t);\n\t}\n}\n\nexport function View(\n\t\t{\n\t\t\tselector,\n\t\t\ttemplate,\n\t\t\ttemplateUrl,\n\t\t\tpipes = [],\n\t\t\tdirectives = []\n\t\t} :\n\t\t{\n\t\t\tselector: string,\n\t\t\ttemplate?: string,\n\t\t\ttemplateUrl?: string,\n\t\t\tpipes?: any[],\n\t\t\tdirectives?: any[]\n\t\t}\n){\n\treturn function(t: any){\n\t\tif(templateUrl)\t{\n\t\t\tcomponentStore.set('templateUrl', templateUrl, t);\n\t\t}\n\t\telse if(template) {\n\t\t\tcomponentStore.set('template', template, t);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(`@Component config must include either a template or a template url for component with selector ${selector} on ${t.name}`);\n\t\t}\n\n\t\tProviders(...directives)(t, `while analyzing Component '${t.name}' directives`);\n\t\tProviders(...pipes)(t, `while analyzing Component '${t.name}' pipes`);\n\t}\n}\n\nModule.addProvider(TYPE, (target: any, name: string, injects: string[], ngModule: ng.IModule) => {\n\t// First create an empty object to contain the directive definition object\n\tlet ddo: any = {};\n\n\t// Loop through the key/val pairs of metadata and assign it to the DDO\n\tcomponentStore.forEach((val, key) => ddo[key] = val, target);\n\n\t// Get the inputs bindings ahead of time\n\tlet bindProp = angular.version.minor >= 4 ? 'bindToController' : 'scope';\n\tddo[bindProp] = inputsMap(ddo.inputMap);\n\n\t// If the selector type was not an element, throw an error. Components can only\n\t// be elements in Angular 2, so we want to enforce that strictly here.\n\tif(ddo.restrict !== 'E') {\n\t\tthrow new Error(createConfigErrorMessage(target, ngModule,\n\t\t\t\t`@Component selectors can only be elements. ` +\n\t\t\t\t`Perhaps you meant to use @Directive?`));\n\t}\n\n\t// Component controllers must be created from a factory. Checkout out\n\t// util/directive-controller.js for more information about what's going on here\n\tcontroller.$inject = ['$scope', '$element', '$attrs', '$transclude', '$injector'];\n\tfunction controller($scope: any, $element: any, $attrs: any, $transclude: any, $injector: any): any{\n\t\tlet locals = { $scope, $element, $attrs, $transclude };\n\n\t\treturn directiveControllerFactory(this, injects, target, ddo, $injector, locals);\n\t}\n\tddo.controller = controller;\n\n\tif (ddo.template && ddo.template.replace) {\n\t\tddo.template = ddo.template.replace(/ng-content/g, 'ng-transclude')\n\t}\n\n\tcomponentHooks._extendDDO.forEach(hook => hook(ddo, target, name, injects, ngModule));\n\n\t// Finally add the component to the raw module\n\tngModule.directive(name, () => ddo);\n\n\tcomponentHooks._after.forEach(hook => hook(target, name, injects, ngModule));\n});\n"],"sourceRoot":"/source/"}