{"version":3,"sources":["/source/decorators/lib/decorators/inject.ts"],"names":["Inject","injectParentComponents"],"mappings":";;;;;;;;;uBAeyC,YAAY;;qCACrB,6BAA6B;;mCACrC,yBAAyB;;kCACvB,yBAAyB;;yBACtB,aAAa;;AAI1C,SAAA,MAAA,GAAyC;sCAAd,OAAc;AAAd,eAAc;;;AACxCA,WAAOA,UAASA,EAAMA,EAAEA,IAAaA,EAAkCA;yEAAlBA,EAACA,KAAKA,EAAEA,SAASA,EAACA;;YAAxBA,EAAEA,QAATA,KAAKA;;AAI5C,YAAM,aAAa,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC;AAC7C,YAAM,CAAC,GAAG,aAAa,GAAG,EAAE,GAAG,EAAE,CAAC;AAElC,YAAM,cAAc,GAAG,SAAjB,cAAc,CAAI,GAAQ;mBAAK,OAAO,GAAG,KAAK,QAAQ,IAAI,EAAE,GAAG,4CAAuB,AAAC;SAAA,CAAC;AAC9F,YAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,GAAQ,EAAA;AACjC,gBAAI,CAAC,uBAAc,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,uBAAc,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;AACvE,sBAAM,IAAI,KAAK,kBAAgB,CAAC,CAAC,IAAI,+BAAyB,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAA,6DACxE,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAA,sNAGe,CAAA;aACzD;AACD,mBAAO,GAAG,CAAC;SACX,CAAC;AAOF,YAAI,SAAS,GAAG,OAAO,CACpB,MAAM,CAAC,cAAc,CAAC,CACtB,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAEzB,2EAAa,SAAS,EAAC,CAAC,CAAC,yBAAsB,CAAC,CAAC,IAAI,2BAAuB,CAAC;AAE7E,YAAI,YAAY,GAAG,OAAO,CAAC,GAAG,0CAAmB,CAAC,MAAM,CAAC,UAAA,CAAC;mBAAI,CAAC,KAAK,SAAS;SAAA,CAAC,CAAC;AAgB/E,YAAI,qBAAY,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;AAClC,gBAAI,aAAa,GAAG,qBAAY,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAClD,iCAAY,GAAG,CAAC,SAAS,+BAAM,YAAY,sBAAK,aAAa,IAAG,CAAC,CAAC,CAAC;SACnE,MAEI;AACJ,iCAAY,GAAG,CAAC,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;SAC5C;KACD,CAAAA;CACDA;;AAED,0BAAe,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;AAMxD,SAAA,sBAAA,CAAgC,MAAW,EAAE,OAAiB,EAAE,UAAe,EAAE,GAAQ,EAAE,SAAc,EAAE,MAAW,EAAA;AACrHC,WAAOA,CAACA,OAAOA,CAACA,UAACA,MAAMA,EAAAA;AACtBA,YAAIA,CAACA,SAASA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA;AAC3BA,gBAAIA,OAAMA,GAAGA,MAAMA,CAACA,QAAQA,CAACA;AAE7BA,eAAGA;AACFA,oBAAIA,CAACA,OAAMA,CAACA,UAAUA,EAAEA,SAASA;AACjCA,oBAAMA,UAAUA,GAAGA,OAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA;AAC7CA,oBAAIA,UAAUA,EAAEA;AACfA,0BAAMA,CAACA,MAAMA,CAACA,GAAGA,UAAUA,CAACA;AAC5BA,2BAAOA;iBACPA;aACDA,QAAQA,CAACA,OAAMA,GAAGA,OAAMA,CAACA,MAAMA,EAAEA,CAAAA,IAAKA,OAAMA,CAACA,MAAMA,GAAGA,CAACA,EAAEA;SAC1DA;KACDA,CAACA,CAACA;CACHA","file":"decorators/inject.js","sourcesContent":["// # Inject Decorator\n// Decorator for adding dependencies to a provider\n//\n// ## Usage\n// Inject string-based dependencies, decorated classes, or classes directly as services\n// ```js\n// import {Inject} from 'ng-forard';\n//\n// class SomeService{ }\n//\n// @Inject('$q', SomeService)\n// class AnotherService{ }\n// ```\n//\n// Import the appWriter for reading and writing metadata\nimport {bundleStore, providerStore} from '../writers';\nimport {getInjectableName} from '../util/get-injectable-name';\nimport {Providers} from '../decorators/providers';\nimport {OpaqueToken} from '../classes/opaque-token';\nimport {componentHooks} from './component';\n\n// ## @Inject\n// Takes an array of injects\nexport function Inject( ...injects: any[] ){\n\treturn function(t1:any, name?: string, {value: t2} = {value: undefined}){\n\n\t\t// We can use @Inject on classes and--in the case of ui-router @Resolve decorator--static methods.\n\t\t// If we use @Inject on a static method then 3 arguments are passed in, instead of just 1.\n\t\tconst targetIsClass = arguments.length === 1;\n\t\tconst t = targetIsClass ? t1 : t2;\n\n\t\tconst notStringBased = (inj: any) => typeof inj !== 'string' && !(inj instanceof OpaqueToken);\n\t\tconst ensureInjectable = (inj: any) => {\n\t\t\tif (!providerStore.get('name', inj) || !providerStore.get('type', inj)) {\n\t\t\t\tthrow new Error(`Processing \"${t.name}\" @Inject parameter: \"${inj.name || inj.toString()}\" is not a valid injectable.\n\t\t\t\tPlease ensure ${inj.name || inj.toString()} is injectable. Valid examples can be:\n\t\t\t\t- a string representing an ng1 provider, e.g. '$q'\n\t\t\t\t- an @Injectable ng-forward class\n\t\t\t\t- a Provider, e.g. provide(SOME_CONFIG, {asValue: 100})`)\n\t\t\t}\n\t\t\treturn inj;\n\t\t};\n\n\n\t\t// At the end of the day, Angular 1's DI requires the injection array to be\n\t\t// an array of strings. Map over the injects to get the string provider name for\n\t\t// each injectable\n\n\t\tvar providers = injects\n\t\t\t\t.filter(notStringBased)\n\t\t\t\t.map(ensureInjectable);\n\n\t\tProviders(...providers)(t, `while analyzing '${t.name}' injected providers`);\n\n\t\tlet dependencies = injects.map(getInjectableName).filter(n => n !== undefined);\n\n\t\t// If there is already an $inject array, assume that it was set by a parent class.\n\t\t// The resultant $inject array should be a concat of local dependencies and parent\n\t\t// injects.\n\t\t// ```js\n\t\t// @Inject('$q', '$http', '$interval')\n\t\t// class Parent{ ... }\n\t\t//\n\t\t// @Inject('$timeout')\n\t\t// class Child extends Parent{\n\t\t// \tconstructor($timeout, ...parentDependencies){\n\t\t// \t\tsuper(...parentDependencies);\n\t\t// \t}\n\t\t// }\n\t\t// ```\n\t\tif (bundleStore.has('$inject', t)) {\n\t\t\tlet parentInjects = bundleStore.get('$inject', t);\n\t\t\tbundleStore.set('$inject', [...dependencies, ...parentInjects], t);\n\t\t}\n\t\t// Otherwise just use the dependencies array as the $inject array.\n\t\telse {\n\t\t\tbundleStore.set('$inject', dependencies, t);\n\t\t}\n\t}\n}\n\ncomponentHooks.beforeCtrlInvoke(injectParentComponents);\n\n// Checks every injection if it is known to the $injector\n// It will then check the unknown injects if there is any parent component that matches\n// the name. If a matching component was found it will inject that component as a\n// local.\nfunction injectParentComponents(caller: any, injects: string[], controller: any, ddo: any, $injector: any, locals: any) {\n\tinjects.forEach((inject) => {\n\t\tif (!$injector.has(inject)) {\n\t\t\tlet parent = locals.$element;\n\n\t\t\tdo {\n\t\t\t\tif (!parent.controller) continue;\n\t\t\t\tconst parentCtrl = parent.controller(inject);\n\t\t\t\tif (parentCtrl) {\n\t\t\t\t\tlocals[inject] = parentCtrl;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while ((parent = parent.parent()) && parent.length > 0);\n\t\t}\n\t});\n}\n"],"sourceRoot":"/source/"}