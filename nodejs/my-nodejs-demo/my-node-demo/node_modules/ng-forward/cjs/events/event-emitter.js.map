{"version":3,"sources":["/source/events/lib/events/event-emitter.ts"],"names":["EventEmitter","EventEmitter.constructor","EventEmitter.subscribe"],"mappings":";;;;;;;;;;;;;;;;2CAAoB,kCAAkC;;;;IA0CtD,YAAA;cAAA,YAAA;;AAQEA,aARF,YAAA,GAQqCA;YAAvBA,OAAOA,yDAAYA,IAAIA;;8BARrC,YAAA;;AASIC,mCATJ,YAAA,6CASYA;AACRA,YAAIA,CAACA,QAAQA,GAAGA,OAAOA,CAACA;KACzBA;;iBAXH,YAAA;;eAaWD,mBAACA,eAAqBA,EAAEA,KAAWA,EAAEA,QAAcA,EAAAA;AAC1DE,gBAAIA,eAAeA,IAAIA,OAAOA,eAAeA,KAAKA,QAAQA,EAAEA;AAE1DA,oBAAIA,WAAWA,GAAGA,IAAIA,CAACA,QAAQA,GAC3BA,UAACA,KAAKA,EAAAA;AAAOA,8BAAUA,CAACA;+BAAMA,eAAeA,CAACA,IAAIA,CAACA,KAAKA,CAACA;qBAAAA,CAACA,CAACA;iBAAEA,GAC7DA,UAACA,KAAKA,EAAAA;AAAOA,mCAAeA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;iBAAEA,CAACA;AAEhDA,kDApBN,YAAA,2CAoB6BA,WAAWA,EAC9BA,UAACA,GAAGA;2BAAKA,eAAeA,CAACA,KAAKA,GAAGA,eAAeA,CAACA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,IAAIA;iBAAAA,EAClEA;2BAAMA,eAAeA,CAACA,QAAQA,GAAGA,eAAeA,CAACA,QAAQA,EAAEA,GAAGA,IAAIA;iBAAAA,EAAEA;aAEzEA,MAAMA;AAELA,oBAAIA,WAAWA,GAAGA,IAAIA,CAACA,QAAQA,GAC3BA,UAACA,KAAKA,EAAAA;AAAOA,8BAAUA,CAACA;+BAAMA,eAAeA,CAACA,KAAKA,CAACA;qBAAAA,CAACA,CAACA;iBAAEA,GACxDA,UAACA,KAAKA,EAAAA;AAAOA,mCAAeA,CAACA,KAAKA,CAACA,CAACA;iBAAEA,CAACA;AAE3CA,kDA9BN,YAAA,2CA8B6BA,WAAWA,EAC9BA,UAACA,GAAGA;2BAAKA,KAAKA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,IAAIA;iBAAAA,EAClCA;2BAAMA,QAAQA,GAAGA,QAAQA,EAAEA,GAAGA,IAAIA;iBAAAA,EAAEA;aAEzCA;SACFA;;;WAnCH,YAAA;;;qBAAA,YAAA","file":"events/event-emitter.js","sourcesContent":["import Subject from '@reactivex/rxjs/dist/es6/Subject';\n\n/**\n * Use by directives and components to emit custom Events. Copied from Angular 2's [EventEmitter](\n * https://github.com/angular/angular/blob/ca3986f31dba5793b0a141e90c4a5fb17ce8847a/modules/angular2/src/core/facade/async.ts#L88-L117).\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter = new EventEmitter();\n *   @Output() close: EventEmitter = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.next(null);\n *     } else {\n *       this.close.next(null);\n *     }\n *   }\n * }\n * ```\n *\n * Use Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n */\nexport default class EventEmitter<T> extends Subject<T> {\n  /** @internal */\n  _isAsync: boolean;\n\n  /**\n   * Creates an instance of [EventEmitter], which depending on [isAsync],\n   * delivers events synchronously or asynchronously.\n   */\n  constructor(isAsync: boolean = true) {\n    super();\n    this._isAsync = isAsync;\n  }\n\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n\n      let schedulerFn = this._isAsync ?\n          (value) => { setTimeout(() => generatorOrNext.next(value)); } :\n          (value) => { generatorOrNext.next(value); };\n\n      return super.subscribe(schedulerFn,\n          (err) => generatorOrNext.error ? generatorOrNext.error(err) : null,\n          () => generatorOrNext.complete ? generatorOrNext.complete() : null);\n\n    } else {\n\n      let schedulerFn = this._isAsync ?\n          (value) => { setTimeout(() => generatorOrNext(value)); } :\n          (value) => { generatorOrNext(value); };\n\n      return super.subscribe(schedulerFn,\n          (err) => error ? error(err) : null,\n          () => complete ? complete() : null);\n\n    }\n  }\n}\n\nexport {Subject}"],"sourceRoot":"/source/"}