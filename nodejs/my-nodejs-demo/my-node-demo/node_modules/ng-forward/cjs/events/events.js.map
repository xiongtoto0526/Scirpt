{"version":3,"sources":["/source/events/lib/events/events.ts","events/events.js"],"names":["resolve","resolve.EventHandler","resolve.EventHandler.constructor","resolve.EventHandler.eventHandler","resolve.EventHandler.onDestroy","add"],"mappings":"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","file":"events/events.js","sourcesContent":["import {Directive} from '../decorators/directive';\nimport {Inject} from '../decorators/inject';\nimport parseSelector from '../util/parse-selector';\nimport {dasherize} from '../util/helpers';\n\nlet events = new Set([\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'mouseenter',\n  'mouseleave',\n  'keydown',\n  'keyup',\n  'keypress',\n  'submit',\n  'focus',\n  'blur',\n  'copy',\n  'cut',\n  'paste',\n  'change',\n  'dragstart',\n  'drag',\n  'dragenter',\n  'dragleave',\n  'dragover',\n  'drop',\n  'dragend',\n  'error',\n  'input',\n  'load',\n  'wheel',\n  'scroll'\n]);\n\nfunction resolve(): any[]{\n  let directives: any[] = [];\n\n  events.forEach(event => {\n    const selector = `[(${dasherize(event)})]`;\n    @Directive({ selector })\n    @Inject('$parse', '$element', '$attrs', '$scope')\n    class EventHandler{\n      public expression: any;\n\n      constructor($parse: ng.IParseService, public $element: JQuery, $attrs: ng.IAttributes, public $scope: ng.IScope){\n\n        let { name: attrName } = parseSelector(selector);\n        this.expression = $parse($attrs[attrName]);\n        $element.on(event, e => this.eventHandler(e));\n        $scope.$on('$destroy', () => this.onDestroy());\n      }\n\n      eventHandler($event: any = {}){\n        let detail = $event.detail;\n        \n        if(!detail && $event.originalEvent && $event.originalEvent.detail){\n          detail = $event.originalEvent.detail;\n        }\n        else if(!detail){\n          detail = {};\n        }\n        \n        this.expression(this.$scope, Object.assign(detail, { $event }));\n        this.$scope.$applyAsync();\n      }\n\n      onDestroy(){\n        this.$element.off(event);\n      }\n    }\n\n    directives.push(EventHandler);\n  });\n\n  return directives;\n}\n\nfunction add(...customEvents: string[]){\n  customEvents.forEach(event => events.add(event));\n}\n\nexport default { resolve, add };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\n    switch (arguments.length) {\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\n    }\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive } from '../decorators/directive';\nimport { Inject } from '../decorators/inject';\nimport parseSelector from '../util/parse-selector';\nimport { dasherize } from '../util/helpers';\nlet events = new Set([\n    'click',\n    'dblclick',\n    'mousedown',\n    'mouseup',\n    'mouseover',\n    'mouseout',\n    'mousemove',\n    'mouseenter',\n    'mouseleave',\n    'keydown',\n    'keyup',\n    'keypress',\n    'submit',\n    'focus',\n    'blur',\n    'copy',\n    'cut',\n    'paste',\n    'change',\n    'dragstart',\n    'drag',\n    'dragenter',\n    'dragleave',\n    'dragover',\n    'drop',\n    'dragend',\n    'error',\n    'input',\n    'load',\n    'wheel',\n    'scroll'\n]);\nfunction resolve() {\n    let directives = [];\n    events.forEach(event => {\n        const selector = `[(${dasherize(event)})]`;\n        let EventHandler = class {\n            constructor($parse, $element, $attrs, $scope) {\n                this.$element = $element;\n                this.$scope = $scope;\n                let { name: attrName } = parseSelector(selector);\n                this.expression = $parse($attrs[attrName]);\n                $element.on(event, e => this.eventHandler(e));\n                $scope.$on('$destroy', () => this.onDestroy());\n            }\n            eventHandler($event = {}) {\n                let detail = $event.detail;\n                if (!detail && $event.originalEvent && $event.originalEvent.detail) {\n                    detail = $event.originalEvent.detail;\n                }\n                else if (!detail) {\n                    detail = {};\n                }\n                this.expression(this.$scope, Object.assign(detail, { $event }));\n                this.$scope.$applyAsync();\n            }\n            onDestroy() {\n                this.$element.off(event);\n            }\n        };\n        EventHandler = __decorate([\n            Directive({ selector }),\n            Inject('$parse', '$element', '$attrs', '$scope'), \n            __metadata('design:paramtypes', [Function, Object, Object, Object])\n        ], EventHandler);\n        directives.push(EventHandler);\n    });\n    return directives;\n}\nfunction add(...customEvents) {\n    customEvents.forEach(event => events.add(event));\n}\nexport default { resolve, add };\n\n"],"sourceRoot":"/source/"}