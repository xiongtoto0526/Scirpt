{"version":3,"sources":["/source/util/lib/util/helpers.ts"],"names":["ucFirst","dashToCamel","dasherize","snakeCase","flatten","createConfigErrorMessage"],"mappings":";;;;;;;;;;;;;;AAAA,IAAM,iBAAiB,GAAG,QAAQ,CAAC;;AAEnC,SAAA,OAAA,CAAwB,IAAY,EAAA;AAClCA,gBAAUA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA,GAAGA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAAGA;CAC9DA;;AAED,SAAA,WAAA,CAA4B,IAAY,EAAA;AACtCC,QAAIA,KAAKA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;AAC5BA,gBAAUA,KAAKA,CAACA,KAAKA,EAAEA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAAGA;CACzDA;;AAED,SAAA,SAAA,CAA0B,IAAY,EAAyB;QAAvB,SAAS,yDAAW,GAAG;;AAC7DC,WAAOA,IAAIA,CAACA,OAAOA,CAACA,iBAAiBA,EAAEA,UAACA,MAAcA,EAAEA,GAAWA,EAAAA;AACjEA,qBAAWA,GAAGA,GAAGA,SAASA,GAAGA,EAAEA,CAAAA,GAAIA,MAAMA,CAACA,WAAWA,EAAEA,CAAGA;KAC3DA,CAACA,CAACA;CACJA;;AAED,SAAA,SAAA,CAA0B,IAAY,EAAyB;QAAvB,SAAS,yDAAW,GAAG;;AAC7DC,WAAOA,IAAIA,CAACA,OAAOA,CAACA,iBAAiBA,EAAEA,UAACA,MAAcA,EAAEA,GAAWA,EAAAA;AACjEA,qBAAWA,GAAGA,GAAGA,SAASA,GAAGA,EAAEA,CAAAA,GAAIA,MAAMA,CAACA,WAAWA,EAAEA,CAAGA;KAC3DA,CAACA,CAACA;CACJA;;AAED,SAAA,OAAA,CAAwB,KAAY,EAAA;AAClCC,QAAIA,QAAQA,GAAUA,EAAEA,CAACA;;;;;;AACzBA,6BAAgBA,KAAKA,8HAACA;gBAAdA,IAAIA;;AACVA,gBAAGA,KAAKA,CAACA,OAAOA,CAACA,IAAIA,CAACA,EAACA;AACrBA,wBAAQA,CAACA,IAAIA,MAAAA,CAAbA,QAAQA,qBAASA,OAAOA,CAACA,IAAIA,CAACA,EAACA,CAACA;aACjCA,MACGA;AACFA,wBAAQA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;aACrBA;SACFA;;;;;;;;;;;;;;;;AAEDA,WAAOA,QAAQA,CAACA;CACjBA;;AAMD,SAAA,wBAAA,CAAyC,MAAc,EAAE,QAAoB,EAAE,OAAe,EAAA;AAC5FC,4BAAsBA,MAAMA,CAACA,IAAIA,cAASA,QAAQA,CAACA,IAAIA,WAAMA,OAAOA,CAAGA;CACxEA","file":"util/helpers.js","sourcesContent":["const SNAKE_CASE_REGEXP = /[A-Z]/g;\n\nexport function ucFirst(word: string): string {\n  return `${word.charAt(0).toUpperCase()}${word.substring(1)}`;\n}\n\nexport function dashToCamel(dash: string): string{\n  let words = dash.split('-');\n  return `${words.shift()}${words.map(ucFirst).join('')}`;\n}\n\nexport function dasherize(name: string, separator: string = '-'): string {\n  return name.replace(SNAKE_CASE_REGEXP, (letter: string, pos: number) => {\n    return `${(pos ? separator : '')}${letter.toLowerCase()}`;\n  });\n}\n\nexport function snakeCase(name: string, separator: string = '-'): string {\n  return name.replace(SNAKE_CASE_REGEXP, (letter: string, pos: number) => {\n    return `${(pos ? separator : '')}${letter.toLowerCase()}`;\n  });\n}\n\nexport function flatten(items: any[]): any[]{\n  let resolved: any[] = [];\n  for(let item of items){\n    if(Array.isArray(item)){\n      resolved.push(...flatten(item));\n    }\n    else{\n      resolved.push(item);\n    }\n  }\n  \n  return resolved;\n}\n\nexport interface INamed {\n  name: string;\n}\n\nexport function createConfigErrorMessage(target: INamed, ngModule: ng.IModule, message: string): string {\n  return `Processing \"${target.name}\" in \"${ngModule.name}\": ${message}`;\n}"],"sourceRoot":"/source/"}