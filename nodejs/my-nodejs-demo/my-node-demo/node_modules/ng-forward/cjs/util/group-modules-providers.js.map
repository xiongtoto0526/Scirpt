{"version":3,"sources":["/source/util/lib/util/group-modules-providers.ts"],"names":["groupModulesAndProviders"],"mappings":";;;;;qBAOA,wBAAA;;uBAP4B,YAAY;;uBAClB,WAAW;;+BACV,uBAAuB;;AAE9C,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,CAAM;WAAK,OAAO,CAAC,KAAK,QAAQ;CAAA,CAAC;AACtD,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,CAAM;WAAK,CAAC,OAAO,CAAC,KAAK,UAAU,IAAI,CAAC,qCAAoB,CAAA,IAAK,uBAAc,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;CAAA,CAAC;;AAErH,SAAA,wBAAA,CAAiD,mBAA0B,EAAoD;QAAlD,YAAY;;AAEvFA,uBAAmBA,GAAGA,sBAAQA,mBAAmBA,CAACA,CAACA;AAGnDA,QAAIA,OAAOA,GAAGA,mBAAmBA,CAACA,MAAMA,CAACA,WAAWA,CAACA,CAACA;AAEtDA,QAAIA,SAASA,GAAGA,mBAAmBA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA;AAE1DA,QAAIA,OAAOA,GAAGA,mBAAmBA,CAACA,MAAMA,CAACA,UAAAA,CAACA;eAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA;KAAAA,CAACA,CAACA,MAAMA,CAACA,UAAAA,CAACA;eAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA;KAAAA,CAACA,CAACA;AAE9FA,QAAIA,OAAOA,CAACA,MAAMA,GAAGA,CAACA,EAACA;AACrBA,cAAMA,IAAIA,SAASA,gBAAcA,YAAYA,iLAEhBA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAAGA,CAACA;KACpDA;AAEDA,WAAOA,EAAEA,OAAOA,EAAPA,OAAOA,EAAEA,SAASA,EAATA,SAASA,EAAEA,CAACA;CAC/BA","file":"util/group-modules-providers.js","sourcesContent":["import {providerStore} from '../writers';\nimport {flatten} from './helpers';\nimport {Provider} from './../classes/provider';\n\nconst STRING_TEST = (a: any) => typeof a === 'string';\nconst PROVIDER_TEST = (a: any) => (typeof a === 'function' || a instanceof Provider) && providerStore.has('name', a);\n\nexport default function groupModulesAndProviders(modulesAndProviders: any[], errorContext: string = `while analyzing providers`)\n    : { modules: any[], providers: any[] } {\n  modulesAndProviders = flatten(modulesAndProviders);\n\n  // find all modules\n  let modules = modulesAndProviders.filter(STRING_TEST);\n  // find all annotated classes and Providers\n  let providers = modulesAndProviders.filter(PROVIDER_TEST);\n\n  let invalid = modulesAndProviders.filter(a => !STRING_TEST(a)).filter(a => !PROVIDER_TEST(a));\n\n  if (invalid.length > 0){\n    throw new TypeError(`TypeError ${errorContext}.\n    Invalid Providers: please make sure all providers are an Injectable(), Component(), Directive(), a Provider, or a module string.\n    Here's the invalid values: ${invalid.join(', ')}`);\n  }\n\n  return { modules, providers };\n}\n"],"sourceRoot":"/source/"}