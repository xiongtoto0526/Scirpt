{"version":3,"sources":["/source/util/lib/util/directive-controller.ts"],"names":[],"mappings":";;;;;;;;;;uCAS0B,8BAA8B;;;;wCAE7B,+BAA+B;;;;mCAC7B,yBAAyB;;qBAKtD,UAAwB,MAAW,EAAE,OAAiB,EAAE,UAAe,EAAE,GAAQ,EAAE,SAAc,EAAE,MAAW,EAAA;AAE5G,QAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AAGnD,SAAI,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE;AAC3B,kDAAc,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;KACjD;AAID,UAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAEhC,wCAAe,iBAAiB,CAAC,OAAO,CAAC,UAAA,IAAI;eAAI,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC;KAAA,CAAC,CAAC;AAI5G,aAAS,CAAC,MAAM,8BAAK,OAAO,IAAE,UAAU,IAAG,QAAQ,EAAE,MAAM,CAAC,CAAC;AAE7D,wCAAe,gBAAgB,CAAC,OAAO,CAAC,UAAA,IAAI;eAAI,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC;KAAA,CAAC,CAAC;QAItG,QAAQ,GAAsD,MAAM,CAApE,QAAQ;QAAE,MAAM,GAA8C,MAAM,CAA1D,MAAM;;AACrB,+CAAe,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC;AAGhE,WAAO,QAAQ,CAAC;CACjB","file":"util/directive-controller.js","sourcesContent":["/* global Object */\n// # Directive Controller Factory\n// While we want to use the component controller, we need a way to add our own\n// properties to the controller instance before the constructor is called. We also\n// want to do this in the context of Angular's DI so that we can access the $element\n// for events and $filter for properties.\n//\n// ## Setup\n// We'll need a1atscript's inputsBuilder for generating the property definitions\nimport inputsBuilder from '../properties/inputs-builder';\n// Also need the outputsBuilder for creating event emitters\nimport outputsBuilder from '../properties/outputs-builder';\nimport {componentHooks} from '../decorators/component';\n\n// ## Factory\n// Needs the injection array, the controller class, and the directive definition\n// object in order to generate the controller\nexport default function(caller: any, injects: string[], controller: any, ddo: any, $injector: any, locals: any): any{\n  // Create an instance of the controller without calling its constructor\n  let instance = Object.create(controller.prototype);\n  // Use a1atscript's inputsBuilder to add the getters/setters then sugar\n  // over `=` and `@` bindings\n  for(let key in ddo.inputMap) {\n    inputsBuilder(instance, key, ddo.inputMap[key]);\n  }\n  // Remember, angular has already set those bindings on the `caller`\n  // argument. Now we need to extend them onto our `instance`. It is important\n  // to extend after defining the properties. That way we fire the setters.\n  Object.assign(instance, caller);\n\n  componentHooks._beforeCtrlInvoke.forEach(hook => hook(caller, injects, controller, ddo, $injector, locals));\n\n  // Finally, invoke the constructor using the injection array and the captured\n  // locals\n  $injector.invoke([...injects, controller], instance, locals);\n\n  componentHooks._afterCtrlInvoke.forEach(hook => hook(caller, injects, controller, ddo, $injector, locals));\n\n  // Outputs work similarly, but they need the raw $element and the $scope for\n  // destroying output observables.\n  let {$element, $scope} : { $element: JQuery, $scope: ng.IScope } = locals;\n  outputsBuilder(instance, $element, $scope, ddo.outputMap || {});\n\n  // Return the controller instance\n  return instance;\n}\n"],"sourceRoot":"/source/"}