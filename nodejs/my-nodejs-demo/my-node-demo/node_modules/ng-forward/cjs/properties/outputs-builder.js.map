{"version":3,"sources":["/source/properties/lib/properties/outputs-builder.ts"],"names":[],"mappings":";;;;;;;;kCAMyB,yBAAyB;;;;+BAE1B,sBAAsB;;;;qBAM9C,UAAwB,QAAa,EAAE,OAAyB,EAAE,MAAiB,EAAE,OAAY,EAAA;AAE/F,QAAI,aAAa,GAAU,EAAE,CAAC;AAI9B,QAAM,MAAM,GAAG,SAAT,MAAM,CAAI,QAAgB,EAAE,OAAqB,EAAA;AACrD,eAAO,OAAO,CAAC,SAAS,CAAC,UAAC,IAAS,EAAA;AACjC,gBAAI,KAAK,GAAG,iCAAgB,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACxE,mBAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SACjC,CAAC,CAAC;KACJ,CAAC;AAIF,SAAI,IAAI,GAAG,IAAI,OAAO,EAAC;AACrB,YAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,2CAAwB,EAAC;AACxD,yBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACzD;KACF;AAGD,UAAM,CAAC,GAAG,CAAC,UAAU,EAAE,UAAC,KAAuB,EAAA;AAC7C,qBAAa,CAAC,OAAO,CAAC,UAAA,YAAY;mBAAI,YAAY,CAAC,WAAW,EAAE;SAAA,CAAC,CAAC;KACnE,CAAC,CAAC;CACJ","file":"properties/outputs-builder.js","sourcesContent":["// # Outputs Builder\n// Takes an instance of a controller and detects event emitters. Subscribes\n// to the emitters to make event dispatching a breeze.\n//\n// ## Setup\n// Import the EventEmitter class\nimport EventEmitter from '../events/event-emitter';\nimport {INgForwardJQuery} from \"../util/jqlite-extensions\";\nimport CustomEvent from '../util/custom-event';\n\n// ## Function\n// Takes an instance of the controller, element of the component for dispatching\n// the output, $scope for disposing of subscriptions, and a map of the emitters and\n// outputs that might be on the instance\nexport default function(instance: any, element: INgForwardJQuery, $scope: ng.IScope, outputs: any){\n  // Collection of subscriptions we'll generate\n  let subscriptions: any[] = [];\n\n  // Create a subscription to the event emitter. When we observe a new value,\n  // dispatch a bubbling event onto the element\n  const create = (eventKey: string, emitter: EventEmitter) => {\n    return emitter.subscribe((data: any) => {\n      let event = new CustomEvent(eventKey, { detail: data, bubbles: false });\n      element[0].dispatchEvent(event);\n    });\n  };\n\n  // Iterate over the emmitterKeys to detect if the controller created any\n  // EventEmitters. If it did, subscribe to the emitter to dispatch the outputs.\n  for(let key in outputs){\n    if(instance[key] && instance[key] instanceof EventEmitter){\n      subscriptions.push(create(outputs[key], instance[key]));\n    }\n  }\n\n  // Once the component's scope has been destroyed, tear down the subscriptions.\n  $scope.$on('$destroy', (event: ng.IAngularEvent) => {\n    subscriptions.forEach(subscription => subscription.unsubscribe());\n  });\n}\n"],"sourceRoot":"/source/"}